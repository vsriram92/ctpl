openapi: 3.0.1
info:
  title: The Jira Cloud platform REST API
  description: Jira Cloud platform REST API documentation
  termsOfService: http://atlassian.com/terms/
  contact:
    email: ecosystem@atlassian.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1001.0.0-SNAPSHOT
externalDocs:
  description: Find out more about Atlassian products and services.
  url: http://www.atlassian.com
servers:
  - url: https://csdcjira.atlassian.net
paths:
  /rest/api/2/issue/{issueIdOrKey}:
    get:
      tags:
        - Issues
      summary: Get issue
      description: |-
        Returns the details for an issue.

        The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: getIssue
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |-
            A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            Examples:

             *  `summary,comment` Returns only the summary and comments fields.
             *  `-description` Returns all (default) fields except description.
             *  `*navigable,-comment` Returns all navigable fields except comment.

            This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.

            Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-2-search-get) and [Search for issues using JQL (POST)](#api-rest-api-2-search-post) where the default is all navigable fields.
          schema:
            type: array
            items:
              type: string
              default: '*all'
        - name: fieldsByKeys
          in: query
          description: Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.
          schema:
            type: boolean
            default: false
        - name: expand
          in: query
          description: |-
            Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
          schema:
            type: string
        - name: properties
          in: query
          description: |-
            A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:

             *  `*all` Returns all issue properties.
             *  Any issue property key, prefixed with a minus to exclude.

            Examples:

             *  `*all` Returns all properties.
             *  `*all,-prop1` Returns all properties except `prop1`.
             *  `prop1,prop2` Returns `prop1` and `prop2` properties.

            This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
          schema:
            type: array
            items:
              type: string
              default: 'null'
        - name: updateHistory
          in: query
          description: Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-2-search-get) `lastViewed` field.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBean'
              example: '{"id":"10002","self":"https://your-domain.atlassian.net/rest/api/2/issue/10002","key":"ED-1","fields":{"watcher":{"self":"https://your-domain.atlassian.net/rest/api/2/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"https://your-domain.atlassian.net/rest/api/2/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia Krystof","active":false}]},"attachment":[{"id":10001,"self":"https://your-domain.atlassian.net/rest/api/2/attachments/10001","filename":"debuglog.txt","author":{"self":"https://your-domain.atlassian.net/rest/api/2/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia Krystof","active":false},"created":"2022-05-27T04:45:21.386+0000","size":2460,"mimeType":"text/plain","content":"https://your-domain.atlassian.net/jira/secure/attachments/10001/debuglog.txt"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/2/issue/ED-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":"Main order flow broken","project":{"self":"https://your-domain.atlassian.net/rest/api/2/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/2/projectCategory/10000","id":"10000","name":"FIRST","description":"First Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2022-05-27T04:45:13.294+0000"}},"comment":[{"self":"https://your-domain.atlassian.net/rest/api/2/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/2/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia Krystof","active":false},"body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.","updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/2/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia Krystof","active":false},"created":"2021-01-17T12:34:00.000+0000","updated":"2021-01-18T23:45:00.000+0000","visibility":{"type":"role","value":"Administrators","identifier":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends on","outward":"is depended by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/2/issue/PR-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends on","outward":"is depended by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/2/issue/PR-3","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"https://your-domain.atlassian.net/rest/api/2/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/2/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/2/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia Krystof","active":false},"comment":"I did some work here.","updated":"2021-01-18T23:45:00.000+0000","visibility":{"type":"group","value":"jira-developers","identifier":"276f955c-63d7-42c8-9520-92d01dca0625"},"started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds":400}}}'
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: Returned if the issue is not found or the user does not have permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - read:issue-meta:jira
            - read:issue-security-level:jira
            - read:issue.vote:jira
            - read:issue.changelog:jira
            - read:avatar:jira
            - read:issue:jira
            - read:status:jira
            - read:user:jira
            - read:field-configuration:jira
        - {}
      x-atlassian-oauth2-scopes:
        - state: Deprecated
          scheme: OAuth2
          scopes:
            - read:jira-work
        - state: Current
          scheme: OAuth2
          scopes:
            - read:issue-meta:jira
            - read:issue-security-level:jira
            - read:issue.vote:jira
            - read:issue.changelog:jira
            - read:avatar:jira
            - read:issue:jira
            - read:status:jira
            - read:user:jira
            - read:field-configuration:jira
      x-atlassian-connect-scope: READ
components:
  schemas:
    ApplicationRole:
      type: object
      properties:
        key:
          type: string
          description: The key of the application role.
        groups:
          uniqueItems: true
          type: array
          description: The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
          items:
            type: string
        groupDetails:
          type: array
          description: The groups associated with the application role.
          items:
            $ref: '#/components/schemas/GroupName'
        name:
          type: string
          description: The display name of the application role.
        defaultGroups:
          uniqueItems: true
          type: array
          description: The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
          items:
            type: string
        defaultGroupsDetails:
          type: array
          description: The groups that are granted default access for this application role.
          items:
            $ref: '#/components/schemas/GroupName'
        selectedByDefault:
          type: boolean
          description: Determines whether this application role should be selected by default on user creation.
        defined:
          type: boolean
          description: Deprecated.
        numberOfSeats:
          type: integer
          description: The maximum count of users on your license.
          format: int32
        remainingSeats:
          type: integer
          description: The count of users remaining on your license.
          format: int32
        userCount:
          type: integer
          description: The number of users counting against your license.
          format: int32
        userCountDescription:
          type: string
          description: The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
        hasUnlimitedSeats:
          type: boolean
        platform:
          type: boolean
          description: Indicates if the application role belongs to Jira platform (`jira-core`).
      additionalProperties: false
      description: Details of an application role.
    AvatarUrlsBean:
      type: object
      properties:
        16x16:
          type: string
          description: The URL of the item's 16x16 pixel avatar.
          format: uri
        24x24:
          type: string
          description: The URL of the item's 24x24 pixel avatar.
          format: uri
        32x32:
          type: string
          description: The URL of the item's 32x32 pixel avatar.
          format: uri
        48x48:
          type: string
          description: The URL of the item's 48x48 pixel avatar.
          format: uri
      additionalProperties: false
    Dashboard:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
          description: The ID of the dashboard.
          readOnly: true
        isFavourite:
          type: boolean
          description: Whether the dashboard is selected as a favorite by the user.
          readOnly: true
        name:
          type: string
          description: The name of the dashboard.
          readOnly: true
        owner:
          description: The owner of the dashboard.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserBean'
        popularity:
          type: integer
          description: The number of users who have this dashboard as a favorite.
          format: int64
          readOnly: true
        rank:
          type: integer
          description: The rank of this dashboard.
          format: int32
          readOnly: true
        self:
          type: string
          description: The URL of these dashboard details.
          format: uri
          readOnly: true
        sharePermissions:
          type: array
          description: The details of any view share permissions for the dashboard.
          readOnly: true
          items:
            $ref: '#/components/schemas/SharePermission'
        editPermissions:
          type: array
          description: The details of any edit share permissions for the dashboard.
          readOnly: true
          items:
            $ref: '#/components/schemas/SharePermission'
        automaticRefreshMs:
          type: integer
          description: The automatic refresh interval for the dashboard in milliseconds.
          format: int32
          readOnly: true
        view:
          type: string
          description: The URL of the dashboard.
          readOnly: true
        isWritable:
          type: boolean
          description: Whether the current user has permission to edit the dashboard.
          readOnly: true
      additionalProperties: false
      description: Details of a dashboard.
    GroupName:
      type: object
      properties:
        name:
          type: string
          description: The name of group.
        groupId:
          type: string
          description: The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
          nullable: true
        self:
          type: string
          description: The URL for these group details.
          format: uri
          readOnly: true
      additionalProperties: false
      description: Details about a group.
    Hierarchy:
      type: object
      properties:
        baseLevelId:
          type: integer
          description: 'The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: int64
        levels:
          type: array
          description: Details about the hierarchy level.
          readOnly: true
          items:
            $ref: '#/components/schemas/SimplifiedHierarchyLevel'
      additionalProperties: false
      description: The project issue type hierarchy.
      xml:
        name: hierarchy
    IssueTypeDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue type details.
          readOnly: true
        id:
          type: string
          description: The ID of the issue type.
          readOnly: true
        description:
          type: string
          description: The description of the issue type.
          readOnly: true
        iconUrl:
          type: string
          description: The URL of the issue type's avatar.
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        subtask:
          type: boolean
          description: Whether this issue type is used to create subtasks.
          readOnly: true
        avatarId:
          type: integer
          description: The ID of the issue type's avatar.
          format: int64
          readOnly: true
        entityId:
          type: string
          description: Unique ID for next-gen projects.
          format: uuid
          readOnly: true
        hierarchyLevel:
          type: integer
          description: Hierarchy level of the issue type.
          format: int32
          readOnly: true
        scope:
          description: Details of the next-gen projects the issue type is available in.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: Details about an issue type.
    ListWrapperCallbackApplicationRole:
      type: object
      additionalProperties: false
    ListWrapperCallbackGroupName:
      type: object
      additionalProperties: false
    PageOfDashboards:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        prev:
          type: string
          description: The URL of the previous page of results, if any.
          readOnly: true
        next:
          type: string
          description: The URL of the next page of results, if any.
          readOnly: true
        dashboards:
          type: array
          description: List of dashboards.
          readOnly: true
          items:
            $ref: '#/components/schemas/Dashboard'
      additionalProperties: false
      description: A page containing dashboard details.
    Project:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional project details in the response.
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the project details.
          format: uri
          readOnly: true
        id:
          type: string
          description: The ID of the project.
        key:
          type: string
          description: The key of the project.
          readOnly: true
        description:
          type: string
          description: A brief description of the project.
          readOnly: true
        lead:
          description: The username of the project lead.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        components:
          type: array
          description: List of the components contained in the project.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectComponent'
        issueTypes:
          type: array
          description: List of the issue types available in the project.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeDetails'
        url:
          type: string
          description: A link to information about this project, such as project documentation.
          readOnly: true
        email:
          type: string
          description: An email address associated with the project.
        assigneeType:
          type: string
          description: The default assignee when creating issues for this project.
          readOnly: true
          enum:
            - PROJECT_LEAD
            - UNASSIGNED
        versions:
          type: array
          description: The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post).
          readOnly: true
          items:
            $ref: '#/components/schemas/Version'
        name:
          type: string
          description: The name of the project.
          readOnly: true
        roles:
          type: object
          additionalProperties:
            type: string
            format: uri
            readOnly: true
          description: The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post).
          readOnly: true
        avatarUrls:
          description: The URLs of the project's avatars.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        projectCategory:
          description: The category the project belongs to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectCategory'
        projectTypeKey:
          type: string
          description: The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
          readOnly: true
          enum:
            - software
            - service_desk
            - business
        simplified:
          type: boolean
          description: Whether the project is simplified.
          readOnly: true
        style:
          type: string
          description: The type of the project.
          readOnly: true
          enum:
            - classic
            - next-gen
        favourite:
          type: boolean
          description: Whether the project is selected as a favorite.
        isPrivate:
          type: boolean
          description: Whether the project is private.
          readOnly: true
        issueTypeHierarchy:
          description: The issue type hierarchy for the project.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Hierarchy'
        permissions:
          description: User permissions on the project
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectPermissions'
        properties:
          type: object
          additionalProperties:
            readOnly: true
          description: Map of project properties
          readOnly: true
        uuid:
          type: string
          description: Unique ID for next-gen projects.
          format: uuid
          readOnly: true
        insight:
          description: Insights about the project.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectInsight'
        deleted:
          type: boolean
          description: Whether the project is marked as deleted.
          readOnly: true
        retentionTillDate:
          type: string
          description: The date when the project is deleted permanently.
          format: date-time
          readOnly: true
        deletedDate:
          type: string
          description: The date when the project was marked as deleted.
          format: date-time
          readOnly: true
        deletedBy:
          description: The user who marked the project as deleted.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        archived:
          type: boolean
          description: Whether the project is archived.
          readOnly: true
        archivedDate:
          type: string
          description: The date when the project was archived.
          format: date-time
          readOnly: true
        archivedBy:
          description: The user who archived the project.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        landingPageInfo:
          description: The project landing page info.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectLandingPageInfo'
      additionalProperties: false
      description: Details about a project.
      xml:
        name: project
    ProjectCategory:
      type: object
      properties:
        self:
          type: string
          description: The URL of the project category.
          format: uri
          readOnly: true
        id:
          type: string
          description: The ID of the project category.
          readOnly: true
        name:
          type: string
          description: The name of the project category. Required on create, optional on update.
        description:
          type: string
          description: The description of the project category.
      additionalProperties: false
      description: A project category.
    ProjectComponent:
      type: object
      properties:
        self:
          type: string
          description: The URL of the component.
          format: uri
          readOnly: true
        id:
          type: string
          description: The unique identifier for the component.
          readOnly: true
        name:
          type: string
          description: The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
        description:
          type: string
          description: The description for the component. Optional when creating or updating a component.
        lead:
          description: The user details for the component's lead user.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        leadUserName:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        leadAccountId:
          maxLength: 128
          type: string
          description: The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          writeOnly: true
        assigneeType:
          type: string
          description: |-
            The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:

             *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
             *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
             *  `UNASSIGNED` an assignee is not set for issues created with this component.
             *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.

            Default value: `PROJECT_DEFAULT`.  
            Optional when creating or updating a component.
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        assignee:
          description: The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        realAssigneeType:
          type: string
          description: |-
            The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:

             *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
             *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
             *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
             *  `PROJECT_DEFAULT` when none of the preceding cases are true.
          readOnly: true
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        realAssignee:
          description: The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        isAssigneeTypeValid:
          type: boolean
          description: Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
          readOnly: true
        project:
          type: string
          description: The key of the project the component is assigned to. Required when creating a component. Can't be updated.
        projectId:
          type: integer
          description: The ID of the project the component is assigned to.
          format: int64
          readOnly: true
      additionalProperties: false
      description: Details about a project component.
      xml:
        name: component
    ProjectDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the project details.
          readOnly: true
        id:
          type: string
          description: The ID of the project.
        key:
          type: string
          description: The key of the project.
          readOnly: true
        name:
          type: string
          description: The name of the project.
          readOnly: true
        projectTypeKey:
          type: string
          description: The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
          readOnly: true
          enum:
            - software
            - service_desk
            - business
        simplified:
          type: boolean
          description: Whether or not the project is simplified.
          readOnly: true
        avatarUrls:
          description: The URLs of the project's avatars.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        projectCategory:
          description: The category the project belongs to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UpdatedProjectCategory'
      additionalProperties: false
      description: Details about a project.
    ProjectInsight:
      type: object
      properties:
        totalIssueCount:
          type: integer
          description: Total issue count.
          format: int64
          readOnly: true
        lastIssueUpdateTime:
          type: string
          description: The last issue update time.
          format: date-time
          readOnly: true
      additionalProperties: false
      description: Additional details about a project.
    ProjectLandingPageInfo:
      type: object
      properties:
        url:
          type: string
        projectKey:
          type: string
        projectType:
          type: string
        boardId:
          type: integer
          format: int64
        simplified:
          type: boolean
      additionalProperties: false
    ProjectPermissions:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Whether the logged user can edit the project.
          readOnly: true
      additionalProperties: false
      description: Permissions which a user has on a project.
    ProjectRole:
      type: object
      properties:
        self:
          type: string
          description: The URL the project role details.
          format: uri
          readOnly: true
        name:
          type: string
          description: The name of the project role.
        id:
          type: integer
          description: The ID of the project role.
          format: int64
          readOnly: true
        description:
          type: string
          description: The description of the project role.
          readOnly: true
        actors:
          type: array
          description: The list of users who act in this role.
          readOnly: true
          items:
            $ref: '#/components/schemas/RoleActor'
        scope:
          description: The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        translatedName:
          type: string
          description: The translated name of the project role.
        currentUserRole:
          type: boolean
          description: Whether the calling user is part of this role.
        default:
          type: boolean
          description: Whether this role is the default role for the project
          readOnly: true
        admin:
          type: boolean
          description: Whether this role is the admin role for the project.
          readOnly: true
        roleConfigurable:
          type: boolean
          description: Whether the roles are configurable for this project.
          readOnly: true
      additionalProperties: false
      description: Details about the roles in a project.
    ProjectRoleGroup:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the group.
        name:
          type: string
          description: The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group.
        groupId:
          type: string
          description: The ID of the group.
      additionalProperties: false
      description: Details of the group associated with the role.
    ProjectRoleUser:
      type: object
      properties:
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
          readOnly: true
      additionalProperties: false
      description: Details of the user associated with the role.
    RoleActor:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the role actor.
          format: int64
          readOnly: true
        displayName:
          type: string
          description: The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.
          readOnly: true
        type:
          type: string
          description: The type of role actor.
          readOnly: true
          enum:
            - atlassian-group-role-actor
            - atlassian-user-role-actor
        name:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
          readOnly: true
        avatarUrl:
          type: string
          description: The avatar of the role actor.
          format: uri
          readOnly: true
        actorUser:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectRoleUser'
        actorGroup:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectRoleGroup'
      additionalProperties: false
      description: Details about a user assigned to a project role.
      xml:
        name: projectRoleActor
    Scope:
      type: object
      properties:
        type:
          type: string
          description: The type of scope.
          readOnly: true
          enum:
            - PROJECT
            - TEMPLATE
        project:
          description: The project the item has scope in.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectDetails'
      additionalProperties: true
      description: The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    SharePermission:
      required:
        - type
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the share permission.
          format: int64
          readOnly: true
        type:
          type: string
          description: |-
            The type of share permission:

             *  `user` Shared with a user.
             *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
             *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
             *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
             *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
             *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
             *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
          enum:
            - user
            - group
            - project
            - projectRole
            - global
            - loggedin
            - authenticated
            - project-unknown
        project:
          description: |-
            The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-2-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  
            For a request, specify the `id` for the project.
          allOf:
            - $ref: '#/components/schemas/Project'
        role:
          description: |-
            The project role that the filter is shared with.  
            For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
          allOf:
            - $ref: '#/components/schemas/ProjectRole'
        group:
          description: The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.
          allOf:
            - $ref: '#/components/schemas/GroupName'
        user:
          description: The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
          allOf:
            - $ref: '#/components/schemas/UserBean'
      additionalProperties: false
      description: Details of a share permission for the filter.
    SimpleLink:
      type: object
      properties:
        id:
          type: string
        styleClass:
          type: string
        iconClass:
          type: string
        label:
          type: string
        title:
          type: string
        href:
          type: string
        weight:
          type: integer
          format: int32
      additionalProperties: false
      description: Details about the operations available in this version.
      xml:
        name: link
    SimpleListWrapperApplicationRole:
      type: object
      properties:
        size:
          type: integer
          format: int32
          xml:
            attribute: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRole'
        pagingCallback:
          $ref: '#/components/schemas/ListWrapperCallbackApplicationRole'
        callback:
          $ref: '#/components/schemas/ListWrapperCallbackApplicationRole'
        max-results:
          type: integer
          format: int32
          xml:
            name: max-results
            attribute: true
      additionalProperties: false
      xml:
        name: list
    SimpleListWrapperGroupName:
      type: object
      properties:
        size:
          type: integer
          format: int32
          xml:
            attribute: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/GroupName'
        pagingCallback:
          $ref: '#/components/schemas/ListWrapperCallbackGroupName'
        callback:
          $ref: '#/components/schemas/ListWrapperCallbackGroupName'
        max-results:
          type: integer
          format: int32
          xml:
            name: max-results
            attribute: true
      additionalProperties: false
      xml:
        name: list
    SimplifiedHierarchyLevel:
      type: object
      properties:
        id:
          type: integer
          description: 'The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: int64
        name:
          type: string
          description: The name of this hierarchy level.
        aboveLevelId:
          type: integer
          description: 'The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: int64
        belowLevelId:
          type: integer
          description: 'The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: int64
        projectConfigurationId:
          type: integer
          description: 'The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: int64
        level:
          type: integer
          description: The level of this item in the hierarchy.
          format: int32
        issueTypeIds:
          type: array
          description: The issue types available in this hierarchy level.
          items:
            type: integer
            format: int64
        externalUuid:
          type: string
          description: 'The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: uuid
        globalHierarchyLevel:
          type: string
          enum:
            - SUBTASK
            - BASE
            - EPIC
      additionalProperties: false
    UpdatedProjectCategory:
      type: object
      properties:
        self:
          type: string
          description: The URL of the project category.
          readOnly: true
        id:
          type: string
          description: The ID of the project category.
          readOnly: true
        description:
          type: string
          description: The name of the project category.
          readOnly: true
        name:
          type: string
          description: The description of the project category.
          readOnly: true
      additionalProperties: false
      description: A project category.
    User:
      type: object
      properties:
        self:
          type: string
          description: The URL of the user.
          format: uri
          readOnly: true
        key:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
        accountType:
          type: string
          description: |-
            The user account type. Can take the following values:

             *  `atlassian` regular Atlassian user account
             *  `app` system account used for Connect applications and OAuth to represent external systems
             *  `customer` Jira Service Desk account representing an external service desk
          readOnly: true
          enum:
            - atlassian
            - app
            - customer
            - unknown
        name:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        emailAddress:
          type: string
          description: The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
          readOnly: true
        avatarUrls:
          description: The avatars of the user.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        displayName:
          type: string
          description: The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
          readOnly: true
        active:
          type: boolean
          description: Whether the user is active.
          readOnly: true
        timeZone:
          type: string
          description: The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
          readOnly: true
        locale:
          type: string
          description: The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
          readOnly: true
        groups:
          description: The groups that the user belongs to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/SimpleListWrapperGroupName'
        applicationRoles:
          description: The application roles the user is assigned to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/SimpleListWrapperApplicationRole'
        expand:
          type: string
          description: Expand options that include additional user details in the response.
          readOnly: true
          xml:
            attribute: true
      additionalProperties: false
      description: |-
        A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:

         *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
         *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
         *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
      xml:
        name: user
    UserBean:
      type: object
      properties:
        key:
          type: string
          description: |-
            This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
            The key of the user.
        self:
          type: string
          description: The URL of the user.
          format: uri
        name:
          type: string
          description: |-
            This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
            The username of the user.
        displayName:
          type: string
          description: The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
        active:
          type: boolean
          description: Whether the user is active.
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        avatarUrls:
          description: The avatars of the user.
          allOf:
            - $ref: '#/components/schemas/UserBeanAvatarUrls'
      additionalProperties: false
    UserBeanAvatarUrls:
      type: object
      properties:
        32x32:
          type: string
          description: The URL of the user's 32x32 pixel avatar.
          format: uri
        24x24:
          type: string
          description: The URL of the user's 24x24 pixel avatar.
          format: uri
        48x48:
          type: string
          description: The URL of the user's 48x48 pixel avatar.
          format: uri
        16x16:
          type: string
          description: The URL of the user's 16x16 pixel avatar.
          format: uri
      additionalProperties: false
    Version:
      type: object
      properties:
        expand:
          type: string
          description: |-
            Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:

             *  `operations` Returns the list of operations available for this version.
             *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.

            Optional for create and update.
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the version.
          format: uri
          readOnly: true
        id:
          type: string
          description: The ID of the version.
          readOnly: true
        description:
          type: string
          description: The description of the version. Optional when creating or updating a version.
        name:
          type: string
          description: The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
        archived:
          type: boolean
          description: Indicates that the version is archived. Optional when creating or updating a version.
        released:
          type: boolean
          description: Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
        startDate:
          type: string
          description: The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
          format: date
        releaseDate:
          type: string
          description: The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
          format: date
        overdue:
          type: boolean
          description: Indicates that the version is overdue.
          readOnly: true
        userStartDate:
          type: string
          description: The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
          readOnly: true
        userReleaseDate:
          type: string
          description: The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
          readOnly: true
        project:
          type: string
          description: Deprecated. Use `projectId`.
        projectId:
          type: integer
          description: The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
          format: int64
        moveUnfixedIssuesTo:
          type: string
          description: The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
          format: uri
        operations:
          type: array
          description: If the expand option `operations` is used, returns the list of operations available for this version.
          readOnly: true
          items:
            $ref: '#/components/schemas/SimpleLink'
        issuesStatusForFixVersion:
          description: If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/VersionIssuesStatus'
      additionalProperties: false
      description: Details about a project version.
      xml:
        name: version
    VersionIssuesStatus:
      type: object
      properties:
        unmapped:
          type: integer
          description: Count of issues with a status other than *to do*, *in progress*, and *done*.
          format: int64
          readOnly: true
        toDo:
          type: integer
          description: Count of issues with status *to do*.
          format: int64
          readOnly: true
        inProgress:
          type: integer
          description: Count of issues with status *in progress*.
          format: int64
          readOnly: true
        done:
          type: integer
          description: Count of issues with status *done*.
          format: int64
          readOnly: true
      additionalProperties: true
      description: Counts of the number of issues in various statuses.
    ErrorCollection:
      type: object
      properties:
        errorMessages:
          type: array
          description: The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
          items:
            type: string
        errors:
          type: object
          additionalProperties:
            type: string
          description: 'The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."'
        status:
          type: integer
          format: int32
      additionalProperties: false
      description: Error messages from an operation.
    PageBeanDashboard:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Dashboard'
      additionalProperties: false
      description: A page of items.
    DashboardDetails:
      required:
        - editPermissions
        - name
        - sharePermissions
      type: object
      properties:
        name:
          type: string
          description: The name of the dashboard.
        description:
          type: string
          description: The description of the dashboard.
        sharePermissions:
          type: array
          description: The share permissions for the dashboard.
          items:
            $ref: '#/components/schemas/SharePermission'
        editPermissions:
          type: array
          description: The edit permissions for the dashboard.
          items:
            $ref: '#/components/schemas/SharePermission'
      additionalProperties: false
      description: Details of a dashboard.
    AvailableDashboardGadget:
      required:
        - title
      type: object
      properties:
        moduleKey:
          type: string
          description: The module key of the gadget type.
          readOnly: true
        uri:
          type: string
          description: The URI of the gadget type.
          readOnly: true
        title:
          type: string
          description: The title of the gadget.
          readOnly: true
      additionalProperties: false
      description: The details of the available dashboard gadget.
    AvailableDashboardGadgetsResponse:
      required:
        - gadgets
      type: object
      properties:
        gadgets:
          type: array
          description: The list of available gadgets.
          readOnly: true
          items:
            $ref: '#/components/schemas/AvailableDashboardGadget'
      additionalProperties: false
      description: The list of available gadgets.
    PropertyKey:
      type: object
      properties:
        self:
          type: string
          description: The URL of the property.
          readOnly: true
        key:
          type: string
          description: The key of the property.
          readOnly: true
      additionalProperties: false
      description: Property key details.
    PropertyKeys:
      type: object
      properties:
        keys:
          type: array
          description: Property key details.
          readOnly: true
          items:
            $ref: '#/components/schemas/PropertyKey'
      additionalProperties: false
      description: List of property keys.
    EntityProperty:
      type: object
      properties:
        key:
          type: string
          description: The key of the property. Required on create and update.
        value:
          description: The value of the property. Required on create and update.
      additionalProperties: false
      description: An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
    DashboardGadget:
      required:
        - color
        - id
        - position
        - title
      type: object
      properties:
        id:
          type: integer
          description: The ID of the gadget instance.
          format: int64
          readOnly: true
        moduleKey:
          type: string
          description: The module key of the gadget type.
          readOnly: true
        uri:
          type: string
          description: The URI of the gadget type.
          readOnly: true
        color:
          type: string
          description: The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
          readOnly: true
          enum:
            - blue
            - red
            - yellow
            - green
            - cyan
            - purple
            - gray
            - white
        position:
          description: The position of the gadget.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/DashboardGadgetPosition'
        title:
          type: string
          description: The title of the gadget.
          readOnly: true
      additionalProperties: false
      description: Details of a gadget.
    DashboardGadgetPosition:
      required:
        - The column position of the gadget.
        - The row position of the gadget.
      type: object
      properties:
        The row position of the gadget.:
          type: integer
          format: int32
        The column position of the gadget.:
          type: integer
          format: int32
      additionalProperties: false
      description: Details of a gadget position.
      writeOnly: true
    DashboardGadgetResponse:
      required:
        - gadgets
      type: object
      properties:
        gadgets:
          type: array
          description: The list of gadgets.
          readOnly: true
          items:
            $ref: '#/components/schemas/DashboardGadget'
      additionalProperties: false
      description: The list of gadgets on the dashboard.
    DashboardGadgetSettings:
      type: object
      properties:
        moduleKey:
          type: string
          description: The module key of the gadget type. Can't be provided with `uri`.
          writeOnly: true
        uri:
          type: string
          description: The URI of the gadget type. Can't be provided with `moduleKey`.
          writeOnly: true
        color:
          type: string
          description: The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
          writeOnly: true
        position:
          description: The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
          allOf:
            - $ref: '#/components/schemas/DashboardGadgetPosition'
        title:
          type: string
          description: The title of the gadget.
          writeOnly: true
        ignoreUriAndModuleKeyValidation:
          type: boolean
          description: Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
          writeOnly: true
      additionalProperties: false
      description: Details of the settings for a dashboard gadget.
    DashboardGadgetUpdateRequest:
      type: object
      properties:
        title:
          type: string
          description: The title of the gadget.
          writeOnly: true
        color:
          type: string
          description: The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
          writeOnly: true
        position:
          description: The position of the gadget.
          allOf:
            - $ref: '#/components/schemas/DashboardGadgetPosition'
      additionalProperties: false
      description: The details of the gadget to update.
    Locale:
      type: object
      properties:
        locale:
          type: string
          description: 'The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create.'
      additionalProperties: false
      description: Details of a locale.
    HealthCheckResult:
      type: object
      properties:
        name:
          type: string
          description: The name of the Jira health check item.
        description:
          type: string
          description: The description of the Jira health check item.
        passed:
          type: boolean
          description: Whether the Jira health check item passed or failed.
      additionalProperties: false
      description: Jira instance health check results. Deprecated and no longer returned.
    ServerInformation:
      type: object
      properties:
        baseUrl:
          type: string
          description: The base URL of the Jira instance.
        version:
          type: string
          description: The version of Jira.
        versionNumbers:
          type: array
          description: The major, minor, and revision version numbers of the Jira version.
          items:
            type: integer
            format: int32
        deploymentType:
          type: string
          description: The type of server deployment. This is always returned as *Cloud*.
        buildNumber:
          type: integer
          description: The build number of the Jira version.
          format: int32
        buildDate:
          type: string
          description: The timestamp when the Jira version was built.
          format: date-time
        serverTime:
          type: string
          description: The time in Jira when this request was responded to.
          format: date-time
        scmInfo:
          type: string
          description: The unique identifier of the Jira version.
        serverTitle:
          type: string
          description: The name of the Jira instance.
        healthChecks:
          type: array
          description: Jira instance health check results. Deprecated and no longer returned.
          items:
            $ref: '#/components/schemas/HealthCheckResult'
      additionalProperties: false
      description: Details about the Jira instance.
    AnnouncementBannerConfiguration:
      type: object
      properties:
        message:
          type: string
          description: The text on the announcement banner.
          readOnly: true
        isDismissible:
          type: boolean
          description: Flag indicating if the announcement banner can be dismissed by the user.
          readOnly: true
        isEnabled:
          type: boolean
          description: Flag indicating if the announcement banner is enabled or not.
          readOnly: true
        hashId:
          type: string
          description: Hash of the banner data. The client detects updates by comparing hash IDs.
          readOnly: true
        visibility:
          type: string
          description: Visibility of the announcement banner.
          readOnly: true
          enum:
            - PUBLIC
            - PRIVATE
      additionalProperties: false
      description: Announcement banner configuration.
    AnnouncementBannerConfigurationUpdate:
      type: object
      properties:
        message:
          type: string
          description: The text on the announcement banner.
        isDismissible:
          type: boolean
          description: Flag indicating if the announcement banner can be dismissed by the user.
        isEnabled:
          type: boolean
          description: Flag indicating if the announcement banner is enabled or not.
        visibility:
          type: string
          description: Visibility of the announcement banner. Can be public or private.
      additionalProperties: false
      description: Configuration of the announcement banner.
      writeOnly: true
    TaskProgressBeanObject:
      required:
        - elapsedRuntime
        - id
        - lastUpdate
        - progress
        - self
        - status
        - submitted
        - submittedBy
      type: object
      properties:
        self:
          type: string
          description: The URL of the task.
          format: uri
        id:
          type: string
          description: The ID of the task.
        description:
          type: string
          description: The description of the task.
        status:
          type: string
          description: The status of the task.
          enum:
            - ENQUEUED
            - RUNNING
            - COMPLETE
            - FAILED
            - CANCEL_REQUESTED
            - CANCELLED
            - DEAD
        message:
          type: string
          description: Information about the progress of the task.
        result:
          description: The result of the task execution.
        submittedBy:
          type: integer
          description: The ID of the user who submitted the task.
          format: int64
        progress:
          type: integer
          description: The progress of the task, as a percentage complete.
          format: int64
        elapsedRuntime:
          type: integer
          description: The execution time of the task, in milliseconds.
          format: int64
        submitted:
          type: integer
          description: A timestamp recording when the task was submitted.
          format: int64
        started:
          type: integer
          description: A timestamp recording when the task was started.
          format: int64
        finished:
          type: integer
          description: A timestamp recording when the task was finished.
          format: int64
        lastUpdate:
          type: integer
          description: A timestamp recording when the task progress was last updated.
          format: int64
      additionalProperties: false
      description: Details about a task.
    BulkIssuePropertyUpdateRequest:
      type: object
      properties:
        value:
          description: The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        expression:
          type: string
          description: EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored.
        filter:
          description: The bulk operation filter.
          allOf:
            - $ref: '#/components/schemas/IssueFilterForBulkPropertySet'
      additionalProperties: false
      description: Bulk issue property update request details.
    IssueFilterForBulkPropertySet:
      type: object
      properties:
        entityIds:
          uniqueItems: true
          type: array
          description: List of issues to perform the bulk operation on.
          items:
            type: integer
            format: int64
        currentValue:
          description: The value of properties to perform the bulk operation on.
        hasProperty:
          type: boolean
          description: Whether the bulk operation occurs only when the property is present on or absent from an issue.
      additionalProperties: false
      description: Bulk operation filter details.
    IssueFilterForBulkPropertyDelete:
      type: object
      properties:
        entityIds:
          uniqueItems: true
          type: array
          description: List of issues to perform the bulk delete operation on.
          items:
            type: integer
            format: int64
        currentValue:
          description: The value of properties to perform the bulk operation on.
      additionalProperties: false
      description: Bulk operation filter details.
    IssueEntityProperties:
      type: object
      properties:
        entitiesIds:
          maxItems: 10000
          minItems: 1
          uniqueItems: true
          type: array
          description: A list of entity property IDs.
          items:
            type: integer
            format: int64
        properties:
          maxProperties: 10
          minProperties: 1
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonNode'
          description: A list of entity property keys and values.
      additionalProperties: false
      description: Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    JsonNode:
      maxProperties: 10
      minProperties: 1
      type: object
      properties:
        array:
          type: boolean
        fields:
          type: object
        'null':
          type: boolean
        floatingPointNumber:
          type: boolean
        elements:
          type: object
        valueNode:
          type: boolean
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        binary:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        object:
          type: boolean
        numberValue:
          type: number
        numberType:
          type: string
          enum:
            - INT
            - LONG
            - BIG_INTEGER
            - FLOAT
            - DOUBLE
            - BIG_DECIMAL
        intValue:
          type: integer
          format: int32
        longValue:
          type: integer
          format: int64
        bigIntegerValue:
          type: integer
        doubleValue:
          type: number
          format: double
        decimalValue:
          type: number
        booleanValue:
          type: boolean
        binaryValue:
          type: array
          items:
            type: string
            format: byte
        valueAsInt:
          type: integer
          format: int32
        valueAsLong:
          type: integer
          format: int64
        valueAsDouble:
          type: number
          format: double
        valueAsBoolean:
          type: boolean
        textValue:
          type: string
        valueAsText:
          type: string
        fieldNames:
          type: object
      additionalProperties: false
    IssueEntityPropertiesForMultiUpdate:
      maxProperties: 100
      minProperties: 1
      type: object
      properties:
        issueID:
          type: integer
          description: The ID of the issue.
          format: int64
        properties:
          maxProperties: 10
          minProperties: 1
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonNode'
          description: Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.
      additionalProperties: false
      description: An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    MultiIssueEntityProperties:
      type: object
      properties:
        issues:
          maxProperties: 100
          minProperties: 1
          type: array
          description: A list of issue IDs and their respective properties.
          items:
            $ref: '#/components/schemas/IssueEntityPropertiesForMultiUpdate'
      additionalProperties: false
      description: A list of issues and their respective properties to set or update. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    IssueTypeInfo:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the issue type.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        avatarId:
          type: integer
          description: The avatar of the issue type.
          format: int64
          readOnly: true
      additionalProperties: false
      description: Details of an issue type.
    ProjectIssueTypeHierarchy:
      type: object
      properties:
        projectId:
          type: integer
          description: The ID of the project.
          format: int64
          readOnly: true
        hierarchy:
          type: array
          description: Details of an issue type hierarchy level.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectIssueTypesHierarchyLevel'
      additionalProperties: false
      description: The hierarchy of issue types within a project.
    ProjectIssueTypesHierarchyLevel:
      type: object
      properties:
        entityId:
          type: string
          description: 'The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).'
          format: uuid
          readOnly: true
        level:
          type: integer
          description: The level of the issue type hierarchy level.
          format: int32
          readOnly: true
        name:
          type: string
          description: The name of the issue type hierarchy level.
          readOnly: true
        issueTypes:
          type: array
          description: The list of issue types in the hierarchy level.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeInfo'
      additionalProperties: false
      description: Details of an issue type hierarchy level.
    IssuesAndJQLQueries:
      required:
        - issueIds
        - jqls
      type: object
      properties:
        jqls:
          type: array
          description: A list of JQL queries.
          items:
            type: string
            description: A list of JQL queries.
        issueIds:
          uniqueItems: true
          type: array
          description: A list of issue IDs.
          items:
            type: integer
            description: A list of issue IDs.
            format: int64
      additionalProperties: false
      description: List of issues and JQL queries.
    IssueMatches:
      required:
        - matches
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/IssueMatchesForJQL'
      additionalProperties: false
      description: A list of matched issues or errors for each JQL query, in the order the JQL queries were passed.
    IssueMatchesForJQL:
      required:
        - errors
        - matchedIssues
      type: object
      properties:
        matchedIssues:
          uniqueItems: true
          type: array
          description: A list of issue IDs.
          items:
            type: integer
            description: A list of issue IDs.
            format: int64
        errors:
          uniqueItems: true
          type: array
          description: A list of errors.
          items:
            type: string
            description: A list of errors.
      additionalProperties: false
      description: A list of the issues matched to a JQL query or details of errors encountered during matching.
    ProjectIssueSecurityLevels:
      required:
        - levels
      type: object
      properties:
        levels:
          type: array
          description: Issue level security items list.
          readOnly: true
          items:
            $ref: '#/components/schemas/SecurityLevel'
      additionalProperties: false
      description: List of issue level security items in a project.
    SecurityLevel:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue level security item.
          readOnly: true
        id:
          type: string
          description: The ID of the issue level security item.
          readOnly: true
        description:
          type: string
          description: The description of the issue level security item.
          readOnly: true
        name:
          type: string
          description: The name of the issue level security item.
          readOnly: true
      additionalProperties: false
      description: Details of an issue level security item.
    CustomContextVariable:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of custom context variable.
      additionalProperties: false
      discriminator:
        propertyName: type
        mapping:
          user: '#/components/schemas/UserContextVariable'
          issue: '#/components/schemas/IssueContextVariable'
          json: '#/components/schemas/JsonContextVariable'
      oneOf:
        - $ref: '#/components/schemas/UserContextVariable'
        - $ref: '#/components/schemas/IssueContextVariable'
        - $ref: '#/components/schemas/JsonContextVariable'
    IdOrKeyBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the referenced item.
          format: int64
        key:
          type: string
          description: The key of the referenced item.
      additionalProperties: false
    IssueContextVariable:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of custom context variable.
        id:
          type: integer
          description: The issue ID.
          format: int64
        key:
          type: string
          description: The issue key.
      description: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
    JexpIssues:
      type: object
      properties:
        jql:
          description: The JQL query that specifies the set of issues available in the Jira expression.
          allOf:
            - $ref: '#/components/schemas/JexpJqlIssues'
      additionalProperties: false
      description: The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable.
    JexpJqlIssues:
      type: object
      properties:
        query:
          type: string
          description: The JQL query.
        startAt:
          type: integer
          description: The index of the first issue to return from the JQL query.
          format: int64
        maxResults:
          type: integer
          description: The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
          format: int32
        validation:
          type: string
          description: Determines how to validate the JQL query and treat the validation results.
          default: strict
          enum:
            - strict
            - warn
            - none
      additionalProperties: false
      description: The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.
    JiraExpressionEvalContextBean:
      type: object
      properties:
        issue:
          description: The issue that is available under the `issue` variable when evaluating the expression.
          allOf:
            - $ref: '#/components/schemas/IdOrKeyBean'
        issues:
          description: The collection of issues that is available under the `issues` variable when evaluating the expression.
          allOf:
            - $ref: '#/components/schemas/JexpIssues'
        project:
          description: The project that is available under the `project` variable when evaluating the expression.
          allOf:
            - $ref: '#/components/schemas/IdOrKeyBean'
        sprint:
          type: integer
          description: The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
          format: int64
        board:
          type: integer
          description: The ID of the board that is available under the `board` variable when evaluating the expression.
          format: int64
        serviceDesk:
          type: integer
          description: The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
          format: int64
        customerRequest:
          type: integer
          description: The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
          format: int64
        custom:
          type: array
          description: |-
            Custom context variables and their types. These variable types are available for use in a custom context:

             *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
             *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
             *  `json`: A JSON object containing custom content.
             *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
          items:
            $ref: '#/components/schemas/CustomContextVariable'
      additionalProperties: false
    JiraExpressionEvalRequestBean:
      required:
        - expression
      type: object
      properties:
        expression:
          type: string
          description: The Jira expression to evaluate.
          example: '{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id) }'
        context:
          description: The context in which the Jira expression is evaluated.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionEvalContextBean'
      additionalProperties: false
    JsonContextVariable:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of custom context variable.
        value:
          type: object
          description: A JSON object containing custom content.
      description: A JSON object with custom content.
    UserContextVariable:
      required:
        - accountId
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of custom context variable.
        accountId:
          type: string
          description: The account ID of the user.
      description: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
    IssuesJqlMetaDataBean:
      required:
        - count
        - maxResults
        - startAt
        - totalCount
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first issue.
          format: int64
        maxResults:
          type: integer
          description: The maximum number of issues that could be loaded in this evaluation.
          format: int32
        count:
          type: integer
          description: The number of issues that were loaded in this evaluation.
          format: int32
        totalCount:
          type: integer
          description: The total number of issues the JQL returned.
          format: int64
        validationWarnings:
          type: array
          description: Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
          items:
            type: string
      additionalProperties: false
      description: The description of the page of issues loaded by the provided JQL query.
    IssuesMetaBean:
      type: object
      properties:
        jql:
          $ref: '#/components/schemas/IssuesJqlMetaDataBean'
      additionalProperties: false
      description: Meta data describing the `issues` context variable.
    JiraExpressionEvaluationMetaDataBean:
      type: object
      properties:
        complexity:
          description: Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityBean'
        issues:
          description: Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
          allOf:
            - $ref: '#/components/schemas/IssuesMetaBean'
      additionalProperties: false
    JiraExpressionResult:
      required:
        - value
      type: object
      properties:
        value:
          description: The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
        meta:
          description: Contains various characteristics of the performed expression evaluation.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionEvaluationMetaDataBean'
      additionalProperties: false
      description: The result of evaluating a Jira expression.
    JiraExpressionsComplexityBean:
      required:
        - beans
        - expensiveOperations
        - primitiveValues
        - steps
      type: object
      properties:
        steps:
          description: The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
        expensiveOperations:
          description: The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
        beans:
          description: The number of Jira REST API beans returned in the response.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
        primitiveValues:
          description: The number of primitive values returned in the response.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
      additionalProperties: false
    JiraExpressionsComplexityValueBean:
      required:
        - limit
        - value
      type: object
      properties:
        value:
          type: integer
          description: The complexity value of the current expression.
          format: int32
        limit:
          type: integer
          description: The maximum allowed complexity. The evaluation will fail if this value is exceeded.
          format: int32
      additionalProperties: false
    JiraExpressionForAnalysis:
      required:
        - expressions
      type: object
      properties:
        expressions:
          type: array
          description: The list of Jira expressions to analyse.
          example: issues.map(issue => issue.properties['property_key'])
          items:
            type: string
            description: The list of Jira expressions to analyse.
            example: issues.map(issue => issue.properties['property_key'])
        contextVariables:
          type: object
          additionalProperties:
            type: string
            description: Context variables and their types. The type checker assumes that <a href="https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables">common context variables</a>, such as <code>issue</code> or <code>project</code>, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
          description: Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
      additionalProperties: false
      description: Details of Jira expressions for analysis.
    JiraExpressionAnalysis:
      required:
        - expression
        - valid
      type: object
      properties:
        expression:
          type: string
          description: The analysed expression.
        errors:
          type: array
          description: A list of validation errors. Not included if the expression is valid.
          items:
            $ref: '#/components/schemas/JiraExpressionValidationError'
        valid:
          type: boolean
          description: Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
        type:
          type: string
          description: EXPERIMENTAL. The inferred type of the expression.
        complexity:
          $ref: '#/components/schemas/JiraExpressionComplexity'
      additionalProperties: false
      description: Details about the analysed Jira expression.
    JiraExpressionComplexity:
      required:
        - expensiveOperations
      type: object
      properties:
        expensiveOperations:
          type: string
          description: |-
            Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:

             *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
             *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
        variables:
          type: object
          additionalProperties:
            type: string
            description: Variables used in the formula, mapped to the parts of the expression they refer to.
          description: Variables used in the formula, mapped to the parts of the expression they refer to.
      additionalProperties: false
      description: Details about the complexity of the analysed Jira expression.
    JiraExpressionValidationError:
      required:
        - message
        - type
      type: object
      properties:
        line:
          type: integer
          description: The text line in which the error occurred.
          format: int32
        column:
          type: integer
          description: The text column in which the error occurred.
          format: int32
        expression:
          type: string
          description: The part of the expression in which the error occurred.
        message:
          type: string
          description: Details about the error.
          example: '!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.'
        type:
          type: string
          description: The error type.
          enum:
            - syntax
            - type
            - other
      additionalProperties: false
      description: |-
        Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:

         *  `line` and `column`
         *  `expression`
    JiraExpressionsAnalysis:
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: The results of Jira expressions analysis.
          items:
            $ref: '#/components/schemas/JiraExpressionAnalysis'
      additionalProperties: false
      description: Details about the analysed Jira expression.
    FailedWebhook:
      required:
        - failureTime
        - id
        - url
      type: object
      properties:
        id:
          type: string
          description: The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
        body:
          type: string
          description: The webhook body.
        url:
          type: string
          description: The original webhook destination.
        failureTime:
          type: integer
          description: The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
          format: int64
      additionalProperties: false
      description: Details about a failed webhook.
    FailedWebhooks:
      required:
        - maxResults
        - values
      type: object
      properties:
        values:
          type: array
          description: The list of webhooks.
          items:
            $ref: '#/components/schemas/FailedWebhook'
        maxResults:
          type: integer
          description: The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
          format: int32
        next:
          type: string
          description: The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
          format: uri
      additionalProperties: false
      description: A page of failed webhooks.
    WebhookDetails:
      required:
        - events
        - jqlFilter
      type: object
      properties:
        jqlFilter:
          type: string
          description: |-
            The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:

             *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
             *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
        fieldIdsFilter:
          type: array
          description: A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
          items:
            type: string
            description: A list of field IDs. When the issue changelog contains any of the fields, the webhook <code>jira:issue_updated</code> is sent. If this parameter is not present, the app is notified about all field updates.
        issuePropertyKeysFilter:
          type: array
          description: A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
          items:
            type: string
            description: A list of issue property keys. A change of those issue properties triggers the <code>issue_property_set</code> or <code>issue_property_deleted</code> webhooks. If this parameter is not present, the app is notified about all issue property updates.
        events:
          type: array
          description: The Jira events that trigger the webhook.
          items:
            type: string
            enum:
              - jira:issue_created
              - jira:issue_updated
              - jira:issue_deleted
              - comment_created
              - comment_updated
              - comment_deleted
              - issue_property_set
              - issue_property_deleted
      additionalProperties: false
      description: A list of webhooks.
    WebhookRegistrationDetails:
      required:
        - url
        - webhooks
      type: object
      properties:
        webhooks:
          type: array
          description: A list of webhooks.
          items:
            $ref: '#/components/schemas/WebhookDetails'
        url:
          type: string
          description: The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered.
      additionalProperties: false
      description: Details of webhooks to register.
    ContainerForRegisteredWebhooks:
      type: object
      properties:
        webhookRegistrationResult:
          type: array
          description: A list of registered webhooks.
          items:
            $ref: '#/components/schemas/RegisteredWebhook'
      additionalProperties: false
      description: Container for a list of registered webhooks. Webhook details are returned in the same order as the request.
    RegisteredWebhook:
      type: object
      properties:
        createdWebhookId:
          type: integer
          description: The ID of the webhook. Returned if the webhook is created.
          format: int64
        errors:
          type: array
          description: Error messages specifying why the webhook creation failed.
          items:
            type: string
            description: Error messages specifying why the webhook creation failed.
      additionalProperties: false
      description: ID of a registered webhook or error messages explaining why a webhook wasn't registered.
    PageBeanWebhook:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Webhook'
      additionalProperties: false
      description: A page of items.
    Webhook:
      required:
        - events
        - id
        - jqlFilter
      type: object
      properties:
        id:
          type: integer
          description: The ID of the webhook.
          format: int64
        jqlFilter:
          type: string
          description: The JQL filter that specifies which issues the webhook is sent for.
        fieldIdsFilter:
          type: array
          description: A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
          items:
            type: string
            description: A list of field IDs. When the issue changelog contains any of the fields, the webhook <code>jira:issue_updated</code> is sent. If this parameter is not present, the app is notified about all field updates.
        issuePropertyKeysFilter:
          type: array
          description: A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
          items:
            type: string
            description: A list of issue property keys. A change of those issue properties triggers the <code>issue_property_set</code> or <code>issue_property_deleted</code> webhooks. If this parameter is not present, the app is notified about all issue property updates.
        events:
          type: array
          description: The Jira events that trigger the webhook.
          items:
            type: string
            enum:
              - jira:issue_created
              - jira:issue_updated
              - jira:issue_deleted
              - comment_created
              - comment_updated
              - comment_deleted
              - issue_property_set
              - issue_property_deleted
        expirationDate:
          type: integer
          description: The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
          format: int64
          readOnly: true
      additionalProperties: false
      description: A webhook.
    ContainerForWebhookIDs:
      required:
        - webhookIds
      type: object
      properties:
        webhookIds:
          type: array
          description: A list of webhook IDs.
          items:
            type: integer
            description: A list of webhook IDs.
            format: int64
      additionalProperties: false
      description: Container for a list of webhook IDs.
    WebhooksExpirationDate:
      required:
        - expirationDate
      type: object
      properties:
        expirationDate:
          type: integer
          description: The expiration date of all the refreshed webhooks.
          format: int64
          readOnly: true
      additionalProperties: false
      description: The date the refreshed webhooks expire.
    GroupDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the group.
        groupId:
          type: string
          description: The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
          nullable: true
      additionalProperties: false
      description: Details about a group.
    PageBeanGroupDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/GroupDetails'
      additionalProperties: false
      description: A page of items.
    IdBean:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to get a list of permission scheme IDs.
          format: int64
      additionalProperties: false
    PermissionGrant:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the permission granted details.
          format: int64
          readOnly: true
        self:
          type: string
          description: The URL of the permission granted details.
          format: uri
          readOnly: true
        holder:
          description: The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
          allOf:
            - $ref: '#/components/schemas/PermissionHolder'
        permission:
          type: string
          description: The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions.
      additionalProperties: false
      description: Details about a permission granted to a user or group.
    PermissionHolder:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of permission holder.
        parameter:
          type: string
          description: As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission.
        value:
          type: string
          description: The identifier associated with the `type` value that defines the holder of the permission.
        expand:
          type: string
          description: Expand options that include additional permission holder details in the response.
          readOnly: true
      additionalProperties: false
      description: Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    PermissionScheme:
      required:
        - name
      type: object
      properties:
        expand:
          type: string
          description: The expand options available for the permission scheme.
          readOnly: true
        id:
          type: integer
          description: The ID of the permission scheme.
          format: int64
          readOnly: true
        self:
          type: string
          description: The URL of the permission scheme.
          format: uri
          readOnly: true
        name:
          type: string
          description: The name of the permission scheme. Must be unique.
        description:
          type: string
          description: A description for the permission scheme.
        scope:
          description: The scope of the permission scheme.
          allOf:
            - $ref: '#/components/schemas/Scope'
        permissions:
          type: array
          description: The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.
          items:
            $ref: '#/components/schemas/PermissionGrant'
      additionalProperties: true
      description: Details of a permission scheme.
    Permissions:
      type: object
      properties:
        permissions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserPermission'
          description: List of permissions.
          readOnly: true
      additionalProperties: false
      description: Details about permissions.
    UserPermission:
      type: object
      properties:
        id:
          type: string
          description: The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        key:
          type: string
          description: The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        name:
          type: string
          description: The name of the permission.
        type:
          type: string
          description: The type of the permission.
          enum:
            - GLOBAL
            - PROJECT
        description:
          type: string
          description: The description of the permission.
        havePermission:
          type: boolean
          description: Whether the permission is available to the user in the queried context.
        deprecatedKey:
          type: boolean
          description: Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
      additionalProperties: true
      description: Details of a permission and its availability to a user.
    BulkPermissionsRequestBean:
      type: object
      properties:
        projectPermissions:
          uniqueItems: true
          type: array
          description: Project permissions with associated projects and issues to look up.
          items:
            $ref: '#/components/schemas/BulkProjectPermissions'
        globalPermissions:
          uniqueItems: true
          type: array
          description: Global permissions to look up.
          items:
            type: string
        accountId:
          type: string
          description: The account ID of a user.
      additionalProperties: false
      description: Details of global permissions to look up and project permissions with associated projects and issues to look up.
    BulkProjectPermissions:
      required:
        - permissions
      type: object
      properties:
        issues:
          uniqueItems: true
          type: array
          description: List of issue IDs.
          items:
            type: integer
            format: int64
        projects:
          uniqueItems: true
          type: array
          description: List of project IDs.
          items:
            type: integer
            format: int64
        permissions:
          uniqueItems: true
          type: array
          description: List of project permissions.
          items:
            type: string
      additionalProperties: false
      description: Details of project permissions and associated issues and projects to look up.
    BulkPermissionGrants:
      required:
        - globalPermissions
        - projectPermissions
      type: object
      properties:
        projectPermissions:
          uniqueItems: true
          type: array
          description: List of project permissions and the projects and issues those permissions provide access to.
          items:
            $ref: '#/components/schemas/BulkProjectPermissionGrants'
        globalPermissions:
          uniqueItems: true
          type: array
          description: List of permissions granted to the user.
          items:
            type: string
      additionalProperties: false
      description: Details of global and project permissions granted to the user.
    BulkProjectPermissionGrants:
      required:
        - issues
        - permission
        - projects
      type: object
      properties:
        permission:
          type: string
          description: A project permission,
        issues:
          uniqueItems: true
          type: array
          description: IDs of the issues the user has the permission for.
          items:
            type: integer
            format: int64
        projects:
          uniqueItems: true
          type: array
          description: IDs of the projects the user has the permission for.
          items:
            type: integer
            format: int64
      additionalProperties: false
      description: List of project permissions and the projects and issues those permissions grant access to.
    PermissionsKeysBean:
      required:
        - permissions
      type: object
      properties:
        permissions:
          type: array
          description: A list of permission keys.
          items:
            type: string
      additionalProperties: false
    PermittedProjects:
      type: object
      properties:
        projects:
          type: array
          description: A list of projects.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectIdentifierBean'
      additionalProperties: false
      description: A list of projects in which a user is granted permissions.
    ProjectIdentifierBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project.
          format: int64
          readOnly: true
        key:
          type: string
          description: The key of the project.
          readOnly: true
      additionalProperties: false
      description: The identifiers for a project.
    PageBeanString:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            type: string
            readOnly: true
      additionalProperties: false
      description: A page of items.
    TimeTrackingProvider:
      required:
        - key
      type: object
      properties:
        key:
          type: string
          description: The key for the time tracking provider. For example, *JIRA*.
        name:
          type: string
          description: The name of the time tracking provider. For example, *JIRA provided time tracking*.
        url:
          type: string
          description: The URL of the configuration page for the time tracking provider app. For example, */example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app.
          readOnly: true
      additionalProperties: false
      description: Details about the time tracking provider.
    TimeTrackingConfiguration:
      required:
        - defaultUnit
        - timeFormat
        - workingDaysPerWeek
        - workingHoursPerDay
      type: object
      properties:
        workingHoursPerDay:
          type: number
          description: The number of hours in a working day.
          format: double
        workingDaysPerWeek:
          type: number
          description: The number of days in a working week.
          format: double
        timeFormat:
          type: string
          description: The format that will appear on an issue's *Time Spent* field.
          enum:
            - pretty
            - days
            - hours
        defaultUnit:
          type: string
          description: The default unit of time applied to logged time.
          enum:
            - minute
            - hour
            - day
            - week
      additionalProperties: false
      description: Details of the time tracking configuration.
    ColumnItem:
      type: object
      properties:
        label:
          type: string
          description: The issue navigator column label.
        value:
          type: string
          description: The issue navigator column value.
      additionalProperties: false
      description: Details of an issue navigator column item.
    License:
      required:
        - applications
      type: object
      properties:
        applications:
          type: array
          description: The applications under this license.
          readOnly: true
          items:
            $ref: '#/components/schemas/LicensedApplication'
      additionalProperties: false
      description: Details about a license for the Jira instance.
    LicensedApplication:
      required:
        - id
        - plan
      type: object
      properties:
        id:
          type: string
          description: The ID of the application.
          readOnly: true
        plan:
          type: string
          description: The licensing plan.
          readOnly: true
          enum:
            - UNLICENSED
            - FREE
            - PAID
      additionalProperties: false
      description: Details about a licensed Jira application.
    IssueEvent:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the event.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the event.
          readOnly: true
      additionalProperties: false
      description: Details about an issue event.
    Configuration:
      type: object
      properties:
        votingEnabled:
          type: boolean
          description: Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
          readOnly: true
        watchingEnabled:
          type: boolean
          description: Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
          readOnly: true
        unassignedIssuesAllowed:
          type: boolean
          description: Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
          readOnly: true
        subTasksEnabled:
          type: boolean
          description: Whether the ability to create subtasks for issues is enabled.
          readOnly: true
        issueLinkingEnabled:
          type: boolean
          description: Whether the ability to link issues is enabled.
          readOnly: true
        timeTrackingEnabled:
          type: boolean
          description: Whether the ability to track time is enabled. This property is deprecated.
          readOnly: true
        attachmentsEnabled:
          type: boolean
          description: Whether the ability to add attachments to issues is enabled.
          readOnly: true
        timeTrackingConfiguration:
          description: The configuration of time tracking.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/TimeTrackingConfiguration'
      additionalProperties: false
      description: Details about the configuration of Jira.
    ApplicationProperty:
      type: object
      properties:
        id:
          type: string
          description: The ID of the application property. The ID and key are the same.
        key:
          type: string
          description: The key of the application property. The ID and key are the same.
        value:
          type: string
          description: The new value.
        name:
          type: string
          description: The name of the application property.
        desc:
          type: string
          description: The description of the application property.
        type:
          type: string
          description: The data type of the application property.
        defaultValue:
          type: string
          description: The default value of the application property.
        example:
          type: string
        allowedValues:
          type: array
          description: The allowed values, if applicable.
          items:
            type: string
      additionalProperties: false
      description: Details of an application property.
    SimpleApplicationPropertyBean:
      type: object
      properties:
        id:
          type: string
          description: The ID of the application property.
        value:
          type: string
          description: The new value.
      additionalProperties: false
      xml:
        name: applicationProperty
    DeprecatedWorkflow:
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
          readOnly: true
        description:
          type: string
          description: The description of the workflow.
          readOnly: true
        lastModifiedDate:
          type: string
          description: The datetime the workflow was last modified.
          readOnly: true
        lastModifiedUser:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
          readOnly: true
        lastModifiedUserAccountId:
          type: string
          description: The account ID of the user that last modified the workflow.
          readOnly: true
        steps:
          type: integer
          description: The number of steps included in the workflow.
          format: int32
          readOnly: true
        scope:
          description: The scope where this workflow applies
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        default:
          type: boolean
      additionalProperties: false
      description: Details about a workflow.
    CreateWorkflowCondition:
      type: object
      properties:
        operator:
          type: string
          description: The compound condition operator.
          enum:
            - AND
            - OR
        conditions:
          type: array
          description: The list of workflow conditions.
          items:
            $ref: '#/components/schemas/CreateWorkflowCondition'
        type:
          type: string
          description: The type of the transition rule.
        configuration:
          type: object
          additionalProperties:
            description: EXPERIMENTAL. The configuration of the transition rule.
          description: EXPERIMENTAL. The configuration of the transition rule.
      additionalProperties: false
      description: A workflow transition condition.
    CreateWorkflowDetails:
      required:
        - name
        - statuses
        - transitions
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
        description:
          type: string
          description: The description of the workflow. The maximum length is 1000 characters.
        transitions:
          type: array
          description: |-
            The transitions of the workflow. For the request to be valid, these transitions must:

             *  include one *initial* transition.
             *  not use the same name for a *global* and *directed* transition.
             *  have a unique name for each *global* transition.
             *  have a unique 'to' status for each *global* transition.
             *  have unique names for each transition from a status.
             *  not have a 'from' status on *initial* and *global* transitions.
             *  have a 'from' status on *directed* transitions.

            All the transition statuses must be included in `statuses`.
          items:
            $ref: '#/components/schemas/CreateWorkflowTransitionDetails'
        statuses:
          uniqueItems: true
          type: array
          description: The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
          items:
            $ref: '#/components/schemas/CreateWorkflowStatusDetails'
      additionalProperties: false
      description: The details of a workflow.
      writeOnly: true
    CreateWorkflowStatusDetails:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the status.
        properties:
          type: object
          additionalProperties:
            type: string
          description: The properties of the status.
      additionalProperties: false
      description: The details of a transition status.
      writeOnly: true
    CreateWorkflowTransitionDetails:
      required:
        - name
        - to
        - type
      type: object
      properties:
        name:
          type: string
          description: The name of the transition. The maximum length is 60 characters.
        description:
          type: string
          description: The description of the transition. The maximum length is 1000 characters.
        from:
          type: array
          description: The statuses the transition can start from.
          items:
            type: string
        to:
          type: string
          description: The status the transition goes to.
        type:
          type: string
          description: The type of the transition.
          enum:
            - global
            - initial
            - directed
        rules:
          description: The rules of the transition.
          allOf:
            - $ref: '#/components/schemas/CreateWorkflowTransitionRulesDetails'
        screen:
          description: The screen of the transition.
          allOf:
            - $ref: '#/components/schemas/CreateWorkflowTransitionScreenDetails'
        properties:
          type: object
          additionalProperties:
            type: string
          description: The properties of the transition.
      additionalProperties: false
      description: The details of a workflow transition.
      writeOnly: true
    CreateWorkflowTransitionRule:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the transition rule.
        configuration:
          type: object
          additionalProperties:
            description: EXPERIMENTAL. The configuration of the transition rule.
          description: EXPERIMENTAL. The configuration of the transition rule.
      additionalProperties: false
      description: A workflow transition rule.
    CreateWorkflowTransitionRulesDetails:
      type: object
      properties:
        conditions:
          description: The workflow conditions.
          allOf:
            - $ref: '#/components/schemas/CreateWorkflowCondition'
        validators:
          type: array
          description: |-
            The workflow validators.

            **Note:** The default permission validator is always added to the *initial* transition, as in:

                "validators": [
                    {
                        "type": "PermissionValidator",
                        "configuration": {
                            "permissionKey": "CREATE_ISSUES"
                        }
                    }
                ]
          items:
            $ref: '#/components/schemas/CreateWorkflowTransitionRule'
        postFunctions:
          type: array
          description: |-
            The workflow post functions.

            **Note:** The default post functions are always added to the *initial* transition, as in:

                "postFunctions": [
                    {
                        "type": "IssueCreateFunction"
                    },
                    {
                        "type": "IssueReindexFunction"
                    },
                    {
                        "type": "FireIssueEventFunction",
                        "configuration": {
                            "event": {
                                "id": "1",
                                "name": "issue_created"
                            }
                        }
                    }
                ]

            **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:

                "postFunctions": [
                    {
                        "type": "UpdateIssueStatusFunction"
                    },
                    {
                        "type": "CreateCommentFunction"
                    },
                    {
                        "type": "GenerateChangeHistoryFunction"
                    },
                    {
                        "type": "IssueReindexFunction"
                    },
                    {
                        "type": "FireIssueEventFunction",
                        "configuration": {
                            "event": {
                                "id": "13",
                                "name": "issue_generic"
                            }
                        }
                    }
                ]
          items:
            $ref: '#/components/schemas/CreateWorkflowTransitionRule'
      additionalProperties: false
      description: The details of a workflow transition rules.
      writeOnly: true
    CreateWorkflowTransitionScreenDetails:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the screen.
      additionalProperties: false
      description: The details of a transition screen.
      writeOnly: true
    WorkflowIDs:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
        entityId:
          type: string
          description: The entity ID of the workflow.
      additionalProperties: false
      description: The classic workflow identifiers.
    WorkflowTransitionProperty:
      required:
        - value
      type: object
      properties:
        key:
          type: string
          description: The key of the transition property. Also known as the name of the transition property.
          readOnly: true
        value:
          type: string
          description: The value of the transition property.
        id:
          type: string
          description: The ID of the transition property.
          readOnly: true
      additionalProperties: true
      description: Details about the server Jira is running on.
    PageBeanWorkflow:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Workflow'
      additionalProperties: false
      description: A page of items.
    PublishedWorkflowId:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
        entityId:
          type: string
          description: The entity ID of the workflow.
      additionalProperties: false
      description: Properties that identify a published workflow.
    Transition:
      required:
        - description
        - from
        - id
        - name
        - to
        - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the transition.
        name:
          type: string
          description: The name of the transition.
        description:
          type: string
          description: The description of the transition.
        from:
          type: array
          description: The statuses the transition can start from.
          items:
            type: string
            description: The statuses the transition can start from.
        to:
          type: string
          description: The status the transition goes to.
        type:
          type: string
          description: The type of the transition.
          enum:
            - global
            - initial
            - directed
        screen:
          $ref: '#/components/schemas/TransitionScreenDetails'
        rules:
          $ref: '#/components/schemas/WorkflowRules'
        properties:
          type: object
          additionalProperties:
            description: The properties of the transition.
          description: The properties of the transition.
      additionalProperties: false
      description: Details of a workflow transition.
    TransitionScreenDetails:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the screen.
        name:
          type: string
          description: The name of the screen.
      additionalProperties: false
      description: The details of a transition screen.
    Workflow:
      required:
        - description
        - id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PublishedWorkflowId'
        description:
          type: string
          description: The description of the workflow.
        transitions:
          type: array
          description: The transitions of the workflow.
          items:
            $ref: '#/components/schemas/Transition'
        statuses:
          type: array
          description: The statuses of the workflow.
          items:
            $ref: '#/components/schemas/WorkflowStatus'
        isDefault:
          type: boolean
          description: Whether this is the default workflow.
        schemes:
          type: array
          description: The workflow schemes the workflow is assigned to.
          items:
            $ref: '#/components/schemas/WorkflowSchemeIdName'
        projects:
          type: array
          description: The projects the workflow is assigned to, through workflow schemes.
          items:
            $ref: '#/components/schemas/ProjectDetails'
        hasDraftWorkflow:
          type: boolean
          description: Whether the workflow has a draft version.
        operations:
          $ref: '#/components/schemas/WorkflowOperations'
        created:
          type: string
          description: The creation date of the workflow.
          format: date-time
        updated:
          type: string
          description: The last edited date of the workflow.
          format: date-time
      additionalProperties: false
      description: Details about a workflow.
    WorkflowCompoundCondition:
      required:
        - conditions
        - nodeType
        - operator
      type: object
      properties:
        operator:
          type: string
          description: The compound condition operator.
          enum:
            - AND
            - OR
        conditions:
          type: array
          description: The list of workflow conditions.
          items:
            $ref: '#/components/schemas/WorkflowCondition'
        nodeType:
          type: string
      description: A compound workflow transition rule condition. This object returns `nodeType` as `compound`.
    WorkflowCondition:
      type: object
      additionalProperties: false
      description: The workflow transition rule conditions tree.
      discriminator:
        propertyName: nodeType
        mapping:
          simple: '#/components/schemas/WorkflowSimpleCondition'
          compound: '#/components/schemas/WorkflowCompoundCondition'
      oneOf:
        - $ref: '#/components/schemas/WorkflowSimpleCondition'
        - $ref: '#/components/schemas/WorkflowCompoundCondition'
    WorkflowOperations:
      required:
        - canDelete
        - canEdit
      type: object
      properties:
        canEdit:
          type: boolean
          description: Whether the workflow can be updated.
        canDelete:
          type: boolean
          description: Whether the workflow can be deleted.
      additionalProperties: false
      description: Operations allowed on a workflow
    WorkflowRules:
      type: object
      properties:
        conditionsTree:
          $ref: '#/components/schemas/WorkflowCondition'
        validators:
          type: array
          description: The workflow validators.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRule'
        postFunctions:
          type: array
          description: The workflow post functions.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRule'
      additionalProperties: false
      description: A collection of transition rules.
    WorkflowSchemeIdName:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the workflow scheme.
        name:
          type: string
          description: The name of the workflow scheme.
      additionalProperties: false
      description: The ID and the name of the workflow scheme.
    WorkflowSimpleCondition:
      required:
        - nodeType
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the transition rule.
        configuration:
          type: object
          description: EXPERIMENTAL. The configuration of the transition rule.
        nodeType:
          type: string
      description: A workflow transition rule condition. This object returns `nodeType` as `simple`.
    WorkflowStatus:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue status.
        name:
          type: string
          description: The name of the status in the workflow.
        properties:
          type: object
          additionalProperties:
            description: Additional properties that modify the behavior of issues in this status. Supports the properties <code>jira.issue.editable</code> and <code>issueEditable</code> (deprecated) that indicate whether issues are editable.
          description: Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable.
      additionalProperties: false
      description: Details of a workflow status.
    WorkflowTransitionRule:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the transition rule.
        configuration:
          description: EXPERIMENTAL. The configuration of the transition rule.
      additionalProperties: false
      description: A workflow transition rule.
    ConnectWorkflowTransitionRule:
      required:
        - configuration
        - id
        - key
      type: object
      properties:
        id:
          type: string
          description: The ID of the transition rule.
        key:
          type: string
          description: The key of the rule, as defined in the Connect app descriptor.
          readOnly: true
        configuration:
          $ref: '#/components/schemas/RuleConfiguration'
        transition:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/WorkflowTransition'
      additionalProperties: false
      description: A workflow transition rule.
    PageBeanWorkflowTransitionRules:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/WorkflowTransitionRules'
      additionalProperties: false
      description: A page of items.
    RuleConfiguration:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: Configuration of the rule, as it is stored by the Connect app on the rule configuration page.
        disabled:
          type: boolean
          description: 'EXPERIMENTAL: Whether the rule is disabled.'
          default: false
        tag:
          maxLength: 255
          type: string
          description: 'EXPERIMENTAL: A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).'
      additionalProperties: false
      description: A rule configuration.
    WorkflowId:
      required:
        - draft
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
        draft:
          type: boolean
          description: Whether the workflow is in the draft state.
      additionalProperties: false
      description: Properties that identify a workflow.
    WorkflowTransition:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          description: The transition ID.
          format: int32
        name:
          type: string
          description: The transition name.
      additionalProperties: false
      description: A workflow transition.
    WorkflowTransitionRules:
      required:
        - workflowId
      type: object
      properties:
        workflowId:
          $ref: '#/components/schemas/WorkflowId'
        postFunctions:
          type: array
          description: The list of post functions within the workflow.
          items:
            $ref: '#/components/schemas/ConnectWorkflowTransitionRule'
        conditions:
          type: array
          description: The list of conditions within the workflow.
          items:
            $ref: '#/components/schemas/ConnectWorkflowTransitionRule'
        validators:
          type: array
          description: The list of validators within the workflow.
          items:
            $ref: '#/components/schemas/ConnectWorkflowTransitionRule'
      additionalProperties: false
      description: A workflow with transition rules.
    WorkflowTransitionRulesUpdate:
      required:
        - workflows
      type: object
      properties:
        workflows:
          type: array
          description: The list of workflows with transition rules to update.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRules'
      additionalProperties: false
      description: Details about a workflow configuration update request.
    WorkflowTransitionRulesUpdateErrorDetails:
      required:
        - ruleUpdateErrors
        - updateErrors
        - workflowId
      type: object
      properties:
        workflowId:
          $ref: '#/components/schemas/WorkflowId'
        ruleUpdateErrors:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
            items:
              type: string
              description: A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
          description: A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
        updateErrors:
          uniqueItems: true
          type: array
          description: The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
          items:
            type: string
            description: An error specifying why the workflow update failed.
      additionalProperties: false
      description: Details of any errors encountered while updating workflow transition rules for a workflow.
    WorkflowTransitionRulesUpdateErrors:
      required:
        - updateResults
      type: object
      properties:
        updateResults:
          type: array
          description: A list of workflows.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrorDetails'
      additionalProperties: false
      description: Details of any errors encountered while updating workflow transition rules.
    WorkflowTransitionRulesDetails:
      required:
        - workflowId
        - workflowRuleIds
      type: object
      properties:
        workflowId:
          $ref: '#/components/schemas/WorkflowId'
        workflowRuleIds:
          uniqueItems: true
          type: array
          description: The list of connect workflow rule IDs.
          items:
            type: string
            description: The list of connect workflow rule IDs.
      additionalProperties: false
      description: Details about a workflow configuration update request.
    WorkflowsWithTransitionRulesDetails:
      required:
        - workflows
      type: object
      properties:
        workflows:
          type: array
          description: The list of workflows with transition rules to delete.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRulesDetails'
      additionalProperties: false
      description: Details of workflows and their transition rules to delete.
    PageBeanWorkflowScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/WorkflowScheme'
      additionalProperties: false
      description: A page of items.
    WorkflowScheme:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the workflow scheme.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
        description:
          type: string
          description: The description of the workflow scheme.
        defaultWorkflow:
          type: string
          description: The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
        issueTypeMappings:
          type: object
          additionalProperties:
            type: string
          description: The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        originalDefaultWorkflow:
          type: string
          description: For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
          readOnly: true
        originalIssueTypeMappings:
          type: object
          additionalProperties:
            type: string
            readOnly: true
          description: For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
          readOnly: true
        draft:
          type: boolean
          description: Whether the workflow scheme is a draft or not.
          readOnly: true
        lastModifiedUser:
          description: The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        lastModified:
          type: string
          description: The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
          readOnly: true
        self:
          type: string
          format: uri
          readOnly: true
        updateDraftIfNeeded:
          type: boolean
          description: |-
            Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:

             *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
             *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
             *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.

            Defaults to `false`.
        issueTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueTypeDetails'
          description: The issue types available in Jira.
          readOnly: true
      additionalProperties: false
      description: Details about a workflow scheme.
    IssueTypesWorkflowMapping:
      type: object
      properties:
        workflow:
          type: string
          description: The name of the workflow. Optional if updating the workflow-issue types mapping.
        issueTypes:
          type: array
          description: The list of issue type IDs.
          items:
            type: string
        defaultMapping:
          type: boolean
          description: Whether the workflow is the default workflow for the workflow scheme.
        updateDraftIfNeeded:
          type: boolean
          description: Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
      additionalProperties: false
      description: Details about the mapping between issue types and a workflow.
    IssueTypeWorkflowMapping:
      type: object
      properties:
        issueType:
          type: string
          description: The ID of the issue type. Not required if updating the issue type-workflow mapping.
        workflow:
          type: string
          description: The name of the workflow.
        updateDraftIfNeeded:
          type: boolean
          description: Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.
      additionalProperties: false
      description: Details about the mapping between an issue type and a workflow.
    DefaultWorkflow:
      required:
        - workflow
      type: object
      properties:
        workflow:
          type: string
          description: The name of the workflow to set as the default workflow.
        updateDraftIfNeeded:
          type: boolean
          description: Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`.
      additionalProperties: false
      description: Details about the default workflow.
    PublishDraftWorkflowScheme:
      type: object
      properties:
        statusMappings:
          uniqueItems: true
          type: array
          description: Mappings of statuses to new statuses for issue types.
          items:
            $ref: '#/components/schemas/StatusMapping'
      additionalProperties: false
      description: Details about the status mappings for publishing a draft workflow scheme.
    StatusMapping:
      required:
        - issueTypeId
        - newStatusId
        - statusId
      type: object
      properties:
        issueTypeId:
          type: string
          description: The ID of the issue type.
        statusId:
          type: string
          description: The ID of the status.
        newStatusId:
          type: string
          description: The ID of the new status.
      additionalProperties: false
      description: Details about the mapping from a status to a new status for an issue type.
    ContainerOfWorkflowSchemeAssociations:
      required:
        - values
      type: object
      properties:
        values:
          type: array
          description: A list of workflow schemes together with projects they are associated with.
          items:
            $ref: '#/components/schemas/WorkflowSchemeAssociations'
      additionalProperties: false
      description: A container for a list of workflow schemes together with the projects they are associated with.
    WorkflowSchemeAssociations:
      required:
        - projectIds
        - workflowScheme
      type: object
      properties:
        projectIds:
          type: array
          description: The list of projects that use the workflow scheme.
          items:
            type: string
        workflowScheme:
          description: The workflow scheme.
          allOf:
            - $ref: '#/components/schemas/WorkflowScheme'
      additionalProperties: false
      description: A workflow scheme along with a list of projects that use it.
    WorkflowSchemeProjectAssociation:
      required:
        - projectId
      type: object
      properties:
        workflowSchemeId:
          type: string
          description: The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.
        projectId:
          type: string
          description: The ID of the project.
      additionalProperties: false
      description: An associated workflow scheme and project.
    PermissionSchemes:
      type: object
      properties:
        permissionSchemes:
          type: array
          description: Permission schemes list.
          readOnly: true
          items:
            $ref: '#/components/schemas/PermissionScheme'
      additionalProperties: false
      description: List of all permission schemes.
    PermissionGrants:
      type: object
      properties:
        permissions:
          type: array
          description: Permission grants list.
          readOnly: true
          items:
            $ref: '#/components/schemas/PermissionGrant'
        expand:
          type: string
          description: Expand options that include additional permission grant details in the response.
          readOnly: true
      additionalProperties: false
      description: List of permission grants.
    JiraStatus:
      type: object
      properties:
        id:
          type: string
          description: The ID of the status.
        name:
          type: string
          description: The name of the status.
        statusCategory:
          type: string
          description: The category of the status.
          enum:
            - TODO
            - IN_PROGRESS
            - DONE
        scope:
          $ref: '#/components/schemas/StatusScope'
        description:
          type: string
          description: The description of the status.
        usages:
          uniqueItems: true
          type: array
          description: Projects and issue types where the status is used. Only available if the `usages` expand is requested.
          items:
            $ref: '#/components/schemas/ProjectIssueTypes'
      additionalProperties: false
      description: Details of a status.
    ProjectId:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the project.
      additionalProperties: false
      description: Project ID details.
    ProjectIssueTypes:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/ProjectId'
        issueTypes:
          uniqueItems: true
          type: array
          description: IDs of the issue types
          items:
            type: string
            description: IDs of the issue types
      additionalProperties: false
      description: Projects and issue types where the status is used. Only available if the `usages` expand is requested.
    StatusScope:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
          enum:
            - PROJECT
            - GLOBAL
        project:
          $ref: '#/components/schemas/ProjectId'
      additionalProperties: false
      description: The scope of the status.
    PageOfStatuses:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int64
        total:
          type: integer
          description: Number of items that satisfy the search.
          format: int64
        isLast:
          type: boolean
          description: Whether this is the last page.
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
        values:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/JiraStatus'
        self:
          type: string
          description: The URL of this page.
        nextPage:
          type: string
          description: The URL of the next page of results, if any.
      additionalProperties: false
    StatusCreate:
      required:
        - name
        - statusCategory
      type: object
      properties:
        name:
          maxLength: 255
          type: string
          description: The name of the status.
        statusCategory:
          type: string
          description: The category of the status.
          enum:
            - TODO
            - IN_PROGRESS
            - DONE
        description:
          type: string
          description: The description of the status.
      additionalProperties: false
      description: Details of the status being created.
    StatusCreateRequest:
      required:
        - scope
        - statuses
      type: object
      properties:
        statuses:
          type: array
          description: Details of the statuses being created.
          items:
            $ref: '#/components/schemas/StatusCreate'
        scope:
          $ref: '#/components/schemas/StatusScope'
      additionalProperties: false
      description: Details of the statuses being created and their scope.
    StatusUpdate:
      required:
        - id
        - name
        - statusCategory
      type: object
      properties:
        id:
          type: string
          description: The ID of the status.
        name:
          type: string
          description: The name of the status.
        statusCategory:
          type: string
          description: The category of the status.
          enum:
            - TODO
            - IN_PROGRESS
            - DONE
        description:
          type: string
          description: The description of the status.
      additionalProperties: false
      description: Details of the status being updated.
    StatusUpdateRequest:
      type: object
      properties:
        statuses:
          type: array
          description: The list of statuses that will be updated.
          items:
            $ref: '#/components/schemas/StatusUpdate'
      additionalProperties: false
      description: The list of statuses that will be updated.
    AssociatedItemBean:
      type: object
      properties:
        id:
          type: string
          description: The ID of the associated record.
          readOnly: true
        name:
          type: string
          description: The name of the associated record.
          readOnly: true
        typeName:
          type: string
          description: The type of the associated record.
          readOnly: true
        parentId:
          type: string
          description: The ID of the associated parent record.
          readOnly: true
        parentName:
          type: string
          description: The name of the associated parent record.
          readOnly: true
      additionalProperties: false
      description: Details of an item associated with the changed record.
    AuditRecordBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the audit record.
          format: int64
          readOnly: true
        summary:
          type: string
          description: The summary of the audit record.
          readOnly: true
        remoteAddress:
          type: string
          description: The URL of the computer where the creation of the audit record was initiated.
          readOnly: true
        authorKey:
          type: string
          description: Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
          readOnly: true
        created:
          type: string
          description: The date and time on which the audit record was created.
          format: date-time
          readOnly: true
        category:
          type: string
          description: The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
          readOnly: true
        eventSource:
          type: string
          description: The event the audit record originated from.
          readOnly: true
        description:
          type: string
          description: The description of the audit record.
          readOnly: true
        objectItem:
          $ref: '#/components/schemas/AssociatedItemBean'
        changedValues:
          type: array
          description: The list of values changed in the record event.
          readOnly: true
          items:
            $ref: '#/components/schemas/ChangedValueBean'
        associatedItems:
          type: array
          description: The list of items associated with the changed record.
          readOnly: true
          items:
            $ref: '#/components/schemas/AssociatedItemBean'
      additionalProperties: false
      description: An audit record.
    AuditRecords:
      type: object
      properties:
        offset:
          type: integer
          description: The number of audit items skipped before the first item in this list.
          format: int32
          readOnly: true
        limit:
          type: integer
          description: The requested or default limit on the number of audit items to be returned.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of audit items returned.
          format: int64
          readOnly: true
        records:
          type: array
          description: The list of audit items.
          readOnly: true
          items:
            $ref: '#/components/schemas/AuditRecordBean'
      additionalProperties: false
      description: Container for a list of audit records.
    ChangedValueBean:
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the field changed.
          readOnly: true
        changedFrom:
          type: string
          description: The value of the field before the change.
          readOnly: true
        changedTo:
          type: string
          description: The value of the field after the change.
          readOnly: true
      additionalProperties: false
      description: Details of names changed in the record event.
    ProjectEmailAddress:
      type: object
      properties:
        emailAddress:
          type: string
          description: The email address.
        emailAddressStatus:
          type: array
          description: When using a custom domain, the status of the email address.
          items:
            type: string
      additionalProperties: false
      description: A project's sender email address.
    ProjectType:
      type: object
      properties:
        key:
          type: string
          description: The key of the project type.
          readOnly: true
        formattedKey:
          type: string
          description: The formatted key of the project type.
          readOnly: true
        descriptionI18nKey:
          type: string
          description: The key of the project type's description.
          readOnly: true
        icon:
          type: string
          description: The icon of the project type.
          readOnly: true
        color:
          type: string
          description: The color of the project type.
          readOnly: true
      additionalProperties: false
      description: Details about a project type.
    PageBeanUser:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
      additionalProperties: false
      description: A page of items.
    UserMigrationBean:
      type: object
      properties:
        key:
          type: string
        username:
          type: string
        accountId:
          type: string
      additionalProperties: false
    UnrestrictedUserEmail:
      type: object
      properties:
        accountId:
          type: string
          description: The accountId of the user
        email:
          type: string
          description: The email of the user
      additionalProperties: true
    CustomFieldReplacement:
      type: object
      properties:
        customFieldId:
          type: integer
          description: The ID of the custom field in which to replace the version number.
          format: int64
        moveTo:
          type: integer
          description: The version number to use as a replacement for the deleted version.
          format: int64
      additionalProperties: false
      description: Details about the replacement for a deleted version.
    DeleteAndReplaceVersionBean:
      type: object
      properties:
        moveFixIssuesTo:
          type: integer
          description: The ID of the version to update `fixVersion` to when the field contains the deleted version.
          format: int64
        moveAffectedIssuesTo:
          type: integer
          description: The ID of the version to update `affectedVersion` to when the field contains the deleted version.
          format: int64
        customFieldReplacementList:
          type: array
          description: An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
          items:
            $ref: '#/components/schemas/CustomFieldReplacement'
      additionalProperties: false
    VersionIssueCounts:
      type: object
      properties:
        self:
          type: string
          description: The URL of these count details.
          format: uri
          readOnly: true
        issuesFixedCount:
          type: integer
          description: Count of issues where the `fixVersion` is set to the version.
          format: int64
          readOnly: true
        issuesAffectedCount:
          type: integer
          description: Count of issues where the `affectedVersion` is set to the version.
          format: int64
          readOnly: true
        issueCountWithCustomFieldsShowingVersion:
          type: integer
          description: Count of issues where a version custom field is set to the version.
          format: int64
          readOnly: true
        customFieldUsage:
          type: array
          description: List of custom fields using the version.
          readOnly: true
          items:
            $ref: '#/components/schemas/VersionUsageInCustomField'
      additionalProperties: false
      description: Various counts of issues within a version.
      xml:
        name: version
    VersionUsageInCustomField:
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the custom field.
          readOnly: true
        customFieldId:
          type: integer
          description: The ID of the custom field.
          format: int64
          readOnly: true
        issueCountWithVersionInCustomField:
          type: integer
          description: Count of the issues where the custom field contains the version.
          format: int64
          readOnly: true
      additionalProperties: false
      description: List of custom fields using the version.
    VersionUnresolvedIssuesCount:
      type: object
      properties:
        self:
          type: string
          description: The URL of these count details.
          format: uri
          readOnly: true
        issuesUnresolvedCount:
          type: integer
          description: Count of unresolved issues.
          format: int64
          readOnly: true
        issuesCount:
          type: integer
          description: Count of issues.
          format: int64
          readOnly: true
      additionalProperties: false
      description: Count of a version's unresolved issues.
      xml:
        name: version
    VersionMoveBean:
      type: object
      properties:
        after:
          type: string
          description: The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
          format: uri
        position:
          type: string
          description: An absolute position in which to place the moved version. Cannot be used with `after`.
          enum:
            - Earlier
            - Later
            - First
            - Last
      additionalProperties: false
      xml:
        name: version
    FoundUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserPickerUser'
        total:
          type: integer
          description: The total number of users found in the search.
          format: int32
        header:
          type: string
          description: Header text indicating the number of users in the response and the total number of users found in the search.
      additionalProperties: false
      description: The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users.
    UserPickerUser:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        name:
          type: string
          description: This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        key:
          type: string
          description: This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        html:
          type: string
          description: The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
        displayName:
          type: string
          description: The display name of the user. Depending on the user’s privacy setting, this may be returned as null.
        avatarUrl:
          type: string
          description: The avatar URL of the user.
          format: uri
      additionalProperties: false
      description: A user found in a search.
    NewUserDetails:
      required:
        - displayName
        - emailAddress
      type: object
      properties:
        self:
          type: string
          description: The URL of the user.
          readOnly: true
        key:
          type: string
          description: This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        name:
          type: string
          description: This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        password:
          type: string
          description: This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
        emailAddress:
          type: string
          description: The email address for the user.
        displayName:
          type: string
          description: A suggested display name for the user. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, this display name is used as a suggestion for creating an account. The user is sent an email asking them to set their display name and privacy preferences.
        applicationKeys:
          type: array
          description: Deprecated, do not use.
          items:
            type: string
      additionalProperties: true
      description: The user details.
    Avatar:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the avatar.
        owner:
          type: string
          description: The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
          readOnly: true
        isSystemAvatar:
          type: boolean
          description: Whether the avatar is a system avatar.
          readOnly: true
        isSelected:
          type: boolean
          description: Whether the avatar is used in Jira. For example, shown as a project's avatar.
          readOnly: true
        isDeletable:
          type: boolean
          description: Whether the avatar can be deleted.
          readOnly: true
        fileName:
          type: string
          description: The file name of the avatar icon. Returned for system avatars.
          readOnly: true
        urls:
          type: object
          additionalProperties:
            type: string
            format: uri
            readOnly: true
          description: The list of avatar icon URLs.
          readOnly: true
      additionalProperties: true
      description: Details of an avatar.
    Avatars:
      type: object
      properties:
        system:
          type: array
          description: System avatars list.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
        custom:
          type: array
          description: Custom avatars list.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
      additionalProperties: false
      description: Details about system and custom avatars.
    StatusCategory:
      type: object
      properties:
        self:
          type: string
          description: The URL of the status category.
          readOnly: true
        id:
          type: integer
          description: The ID of the status category.
          format: int64
          readOnly: true
        key:
          type: string
          description: The key of the status category.
          readOnly: true
        colorName:
          type: string
          description: The name of the color used to represent the status category.
          readOnly: true
        name:
          type: string
          description: The name of the status category.
          readOnly: true
      additionalProperties: true
      description: A status category.
    StatusDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the status.
          readOnly: true
        description:
          type: string
          description: The description of the status.
          readOnly: true
        iconUrl:
          type: string
          description: The URL of the icon used to represent the status.
          readOnly: true
        name:
          type: string
          description: The name of the status.
          readOnly: true
        id:
          type: string
          description: The ID of the status.
          readOnly: true
        statusCategory:
          description: The category assigned to the status.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StatusCategory'
      additionalProperties: true
      description: A status.
    ScreenableTab:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen tab.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the screen tab. The maximum length is 255 characters.
      additionalProperties: false
      description: A screen tab.
    PageBeanScreen:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Screen'
      additionalProperties: false
      description: A page of items.
    Screen:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the screen.
          readOnly: true
        description:
          type: string
          description: The description of the screen.
          readOnly: true
        scope:
          description: The scope of the screen.
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: A screen.
    ScreenableField:
      type: object
      properties:
        id:
          type: string
          description: The ID of the screen tab field.
          readOnly: true
        name:
          type: string
          description: The name of the screen tab field. Required on create and update. The maximum length is 255 characters.
      additionalProperties: false
      description: A screen tab field.
    MoveFieldBean:
      type: object
      properties:
        after:
          type: string
          description: The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
          format: uri
        position:
          type: string
          description: The named position to which the screen tab field should be moved. Required if `after` isn't provided.
          enum:
            - Earlier
            - Later
            - First
            - Last
      additionalProperties: false
    AddFieldBean:
      required:
        - fieldId
      type: object
      properties:
        fieldId:
          type: string
          description: The ID of the field to add.
      additionalProperties: false
    ScreenDetails:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the screen. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the screen. The maximum length is 255 characters.
          writeOnly: true
      additionalProperties: false
      description: Details of a screen.
    UpdateScreenDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the screen. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the screen. The maximum length is 255 characters.
          writeOnly: true
      additionalProperties: false
      description: Details of a screen.
    Resolution:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue resolution.
          format: uri
        id:
          type: string
          description: The ID of the issue resolution.
        description:
          type: string
          description: The description of the issue resolution.
        name:
          type: string
          description: The name of the issue resolution.
      additionalProperties: false
      description: Details of an issue resolution.
      xml:
        name: resolution
    CreateProjectDetails:
      required:
        - key
        - name
      type: object
      properties:
        key:
          type: string
          description: Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        name:
          type: string
          description: The name of the project.
        description:
          type: string
          description: A brief description of the project.
        lead:
          type: string
          description: This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
        leadAccountId:
          maxLength: 128
          type: string
          description: The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
        url:
          type: string
          description: A link to information about this project, such as project documentation
        assigneeType:
          type: string
          description: The default assignee when creating issues for this project.
          enum:
            - PROJECT_LEAD
            - UNASSIGNED
        avatarId:
          type: integer
          description: An integer value for the project's avatar.
          format: int64
        issueSecurityScheme:
          type: integer
          description: The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) resource to get all issue security scheme IDs.
          format: int64
        permissionScheme:
          type: integer
          description: The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to see a list of all permission scheme IDs.
          format: int64
        notificationScheme:
          type: integer
          description: The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-2-notificationscheme-get) resource to get a list of notification scheme IDs.
          format: int64
        categoryId:
          type: integer
          description: The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
          format: int64
        projectTypeKey:
          type: string
          description: The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
          enum:
            - software
            - service_desk
            - business
        projectTemplateKey:
          type: string
          description: A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
          enum:
            - com.pyxis.greenhopper.jira:gh-simplified-agility-kanban
            - com.pyxis.greenhopper.jira:gh-simplified-agility-scrum
            - com.pyxis.greenhopper.jira:gh-simplified-basic
            - com.pyxis.greenhopper.jira:gh-simplified-kanban-classic
            - com.pyxis.greenhopper.jira:gh-simplified-scrum-classic
            - com.atlassian.servicedesk:simplified-it-service-management
            - com.atlassian.servicedesk:simplified-general-service-desk
            - com.atlassian.servicedesk:simplified-internal-service-desk
            - com.atlassian.servicedesk:simplified-external-service-desk
            - com.atlassian.servicedesk:simplified-hr-service-desk
            - com.atlassian.servicedesk:simplified-facilities-service-desk
            - com.atlassian.servicedesk:simplified-legal-service-desk
            - com.atlassian.jira-core-project-templates:jira-core-simplified-content-management
            - com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval
            - com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking
            - com.atlassian.jira-core-project-templates:jira-core-simplified-process-control
            - com.atlassian.jira-core-project-templates:jira-core-simplified-procurement
            - com.atlassian.jira-core-project-templates:jira-core-simplified-project-management
            - com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment
            - com.atlassian.jira-core-project-templates:jira-core-simplified-task-
        workflowScheme:
          type: integer
          description: The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-2-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
          format: int64
        issueTypeScreenScheme:
          type: integer
          description: The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-2-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
          format: int64
        issueTypeScheme:
          type: integer
          description: The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-2-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
          format: int64
        fieldConfigurationScheme:
          type: integer
          description: The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-2-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
          format: int64
      additionalProperties: false
      description: Details about the project.
    ProjectIdentifiers:
      required:
        - id
        - key
        - self
      type: object
      properties:
        self:
          type: string
          description: The URL of the created project.
          format: uri
          readOnly: true
        id:
          type: integer
          description: The ID of the created project.
          format: int64
          readOnly: true
        key:
          type: string
          description: The key of the created project.
          readOnly: true
      additionalProperties: false
      description: Identifiers for a project.
    UpdateProjectDetails:
      type: object
      properties:
        key:
          type: string
          description: Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        name:
          type: string
          description: The name of the project.
        description:
          type: string
          description: A brief description of the project.
        lead:
          type: string
          description: This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
        leadAccountId:
          maxLength: 128
          type: string
          description: The account ID of the project lead. Cannot be provided with `lead`.
        url:
          type: string
          description: A link to information about this project, such as project documentation
        assigneeType:
          type: string
          description: The default assignee when creating issues for this project.
          enum:
            - PROJECT_LEAD
            - UNASSIGNED
        avatarId:
          type: integer
          description: An integer value for the project's avatar.
          format: int64
        issueSecurityScheme:
          type: integer
          description: The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) resource to get all issue security scheme IDs.
          format: int64
        permissionScheme:
          type: integer
          description: The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to see a list of all permission scheme IDs.
          format: int64
        notificationScheme:
          type: integer
          description: The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-2-notificationscheme-get) resource to get a list of notification scheme IDs.
          format: int64
        categoryId:
          type: integer
          description: The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
          format: int64
      additionalProperties: false
      description: Details about the project.
    PageBeanVersion:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Version'
      additionalProperties: false
      description: A page of items.
    ComponentWithIssueCount:
      type: object
      properties:
        issueCount:
          type: integer
          description: Count of issues for the component.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name for the component.
          readOnly: true
        id:
          type: string
          description: The unique identifier for the component.
          readOnly: true
        realAssignee:
          description: The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
          allOf:
            - $ref: '#/components/schemas/User'
        isAssigneeTypeValid:
          type: boolean
          description: Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
          readOnly: true
        assignee:
          description: The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
          allOf:
            - $ref: '#/components/schemas/User'
        realAssigneeType:
          type: string
          description: |-
            The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:

             *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
             *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
             *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
             *  `PROJECT_DEFAULT` when none of the preceding cases are true.
          readOnly: true
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        assigneeType:
          type: string
          description: |-
            The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:

             *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
             *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
             *  `UNASSIGNED` an assignee is not set for issues created with this component.
             *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
          readOnly: true
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        lead:
          description: The user details for the component's lead user.
          allOf:
            - $ref: '#/components/schemas/User'
        description:
          type: string
          description: The description for the component.
          readOnly: true
        projectId:
          type: integer
          description: Not used.
          format: int64
          readOnly: true
        project:
          type: string
          description: The key of the project to which the component is assigned.
          readOnly: true
        self:
          type: string
          description: The URL for this count of the issues contained in the component.
          format: uri
          readOnly: true
      additionalProperties: false
      description: Details about a component with a count of the issues it contains.
    PageBeanComponentWithIssueCount:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ComponentWithIssueCount'
      additionalProperties: false
      description: A page of items.
    StringList:
      type: object
      additionalProperties: false
    PageBeanProject:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Project'
      additionalProperties: false
      description: A page of items.
    ProjectAvatars:
      type: object
      properties:
        system:
          type: array
          description: List of avatars included with Jira. These avatars cannot be deleted.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
        custom:
          type: array
          description: List of avatars added to Jira. These avatars may be deleted.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
      additionalProperties: false
      description: List of project avatars.
    IssueTypeWithStatus:
      required:
        - id
        - name
        - self
        - statuses
        - subtask
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue type's status details.
          readOnly: true
        id:
          type: string
          description: The ID of the issue type.
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        subtask:
          type: boolean
          description: Whether this issue type represents subtasks.
          readOnly: true
        statuses:
          type: array
          description: List of status details for the issue type.
          readOnly: true
          items:
            $ref: '#/components/schemas/StatusDetails'
      additionalProperties: false
      description: Status details for an issue type.
    SecurityScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue security scheme.
          readOnly: true
        id:
          type: integer
          description: The ID of the issue security scheme.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the issue security scheme.
          readOnly: true
        description:
          type: string
          description: The description of the issue security scheme.
          readOnly: true
        defaultSecurityLevelId:
          type: integer
          description: The ID of the default security level.
          format: int64
          readOnly: true
        levels:
          type: array
          items:
            $ref: '#/components/schemas/SecurityLevel'
      additionalProperties: false
      description: Details about a security scheme.
    ContainerForProjectFeatures:
      type: object
      properties:
        features:
          type: array
          description: The project features.
          items:
            $ref: '#/components/schemas/ProjectFeature'
      additionalProperties: false
      description: The list of features on a project.
    ProjectFeature:
      type: object
      properties:
        projectId:
          type: integer
          description: The ID of the project.
          format: int64
        state:
          type: string
          description: The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
          enum:
            - ENABLED
            - DISABLED
            - COMING_SOON
        toggleLocked:
          type: boolean
          description: Whether the state of the feature can be updated.
        feature:
          type: string
          description: The key of the feature.
        prerequisites:
          type: array
          description: List of keys of the features required to enable the feature.
          items:
            type: string
        localisedName:
          type: string
          description: Localized display name for the feature.
        localisedDescription:
          type: string
          description: Localized display description for the feature.
        imageUri:
          type: string
          description: URI for the image representing the feature.
      additionalProperties: false
      description: Details of a project feature.
    ProjectFeatureState:
      type: object
      properties:
        state:
          type: string
          description: The feature state.
          enum:
            - ENABLED
            - DISABLED
            - COMING_SOON
      additionalProperties: false
      description: Details of the feature state.
    Priority:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue priority.
        statusColor:
          type: string
          description: The color used to indicate the issue priority.
        description:
          type: string
          description: The description of the issue priority.
        iconUrl:
          type: string
          description: The URL of the icon for the issue priority.
        name:
          type: string
          description: The name of the issue priority.
        id:
          type: string
          description: The ID of the issue priority.
        isDefault:
          type: boolean
          description: Whether this priority is the default.
      additionalProperties: true
      description: An issue priority.
    CreatePriorityDetails:
      required:
        - name
        - statusColor
      type: object
      properties:
        name:
          maxLength: 60
          type: string
          description: The name of the priority. Must be unique.
          writeOnly: true
        description:
          maxLength: 255
          type: string
          description: The description of the priority.
          writeOnly: true
        iconUrl:
          maxLength: 255
          type: string
          description: The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
          writeOnly: true
          enum:
            - /images/icons/priorities/blocker.png
            - /images/icons/priorities/critical.png
            - /images/icons/priorities/high.png
            - /images/icons/priorities/highest.png
            - /images/icons/priorities/low.png
            - /images/icons/priorities/lowest.png
            - /images/icons/priorities/major.png
            - /images/icons/priorities/medium.png
            - /images/icons/priorities/minor.png
            - /images/icons/priorities/trivial.png
        statusColor:
          type: string
          description: The status color of the priority in 3-digit or 6-digit hexadecimal format.
          writeOnly: true
      additionalProperties: true
      description: Details of an issue priority.
    PriorityId:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue priority.
          readOnly: true
      additionalProperties: true
      description: The ID of an issue priority.
    UpdatePriorityDetails:
      type: object
      properties:
        name:
          maxLength: 60
          type: string
          description: The name of the priority. Must be unique.
          writeOnly: true
        description:
          maxLength: 255
          type: string
          description: The description of the priority.
          writeOnly: true
        iconUrl:
          maxLength: 255
          type: string
          description: The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
          writeOnly: true
          enum:
            - /images/icons/priorities/blocker.png
            - /images/icons/priorities/critical.png
            - /images/icons/priorities/high.png
            - /images/icons/priorities/highest.png
            - /images/icons/priorities/low.png
            - /images/icons/priorities/lowest.png
            - /images/icons/priorities/major.png
            - /images/icons/priorities/medium.png
            - /images/icons/priorities/minor.png
            - /images/icons/priorities/trivial.png
        statusColor:
          type: string
          description: The status color of the priority in 3-digit or 6-digit hexadecimal format.
          writeOnly: true
      additionalProperties: true
      description: Details of an issue priority.
    PageBeanPriority:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Priority'
      additionalProperties: false
      description: A page of items.
    Comment:
      type: object
      properties:
        self:
          type: string
          description: The URL of the comment.
          readOnly: true
        id:
          type: string
          description: The ID of the comment.
          readOnly: true
        author:
          description: The ID of the user who created the comment.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        body:
          type: string
          description: The comment text.
        renderedBody:
          type: string
          description: The rendered version of the comment.
          readOnly: true
        updateAuthor:
          description: The ID of the user who updated the comment last.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        created:
          type: string
          description: The date and time at which the comment was created.
          format: date-time
          readOnly: true
        updated:
          type: string
          description: The date and time at which the comment was updated last.
          format: date-time
          readOnly: true
        visibility:
          description: The group or role to which this comment is visible. Optional on create and update.
          allOf:
            - $ref: '#/components/schemas/Visibility'
        jsdPublic:
          type: boolean
          description: Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
          readOnly: true
        jsdAuthorCanSeeRequest:
          type: boolean
          description: Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
          readOnly: true
        properties:
          type: array
          description: A list of comment properties. Optional on create and update.
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: true
      description: A comment.
    Fields:
      type: object
      properties:
        summary:
          type: string
          description: The summary description of the linked issue.
          readOnly: true
        status:
          description: The status of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StatusDetails'
        priority:
          description: The priority of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Priority'
        assignee:
          description: The assignee of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        timetracking:
          description: The time tracking of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/TimeTrackingDetails'
        issuetype:
          description: The type of the linked issue.
          $ref: '#/components/schemas/IssueTypeDetails'
        issueType:
          description: The type of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/IssueTypeDetails'
      additionalProperties: false
      description: Key fields from the linked issue.
    IssueLinkType:
      type: object
      properties:
        id:
          type: string
          description: |-
            The ID of the issue link type and is used as follows:

             *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
             *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is read only.
        name:
          type: string
          description: |-
            The name of the issue link type and is used as follows:

             *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
             *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        inward:
          type: string
          description: |-
            The description of the issue link type inward link and is used as follows:

             *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is read only.
             *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        outward:
          type: string
          description: |-
            The description of the issue link type outward link and is used as follows:

             *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is read only.
             *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        self:
          type: string
          description: The URL of the issue link type. Read only.
          format: uri
          readOnly: true
      additionalProperties: false
      description: |-
        This object is used as follows:

         *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-2-issueLinkType-get).
         *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it defines and reports on issue link types.
    LinkIssueRequestJsonBean:
      required:
        - inwardIssue
        - outwardIssue
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IssueLinkType'
        inwardIssue:
          $ref: '#/components/schemas/LinkedIssue'
        outwardIssue:
          $ref: '#/components/schemas/LinkedIssue'
        comment:
          $ref: '#/components/schemas/Comment'
      additionalProperties: false
    LinkedIssue:
      type: object
      properties:
        id:
          type: string
          description: The ID of an issue. Required if `key` isn't provided.
        key:
          type: string
          description: The key of an issue. Required if `id` isn't provided.
        self:
          type: string
          description: The URL of the issue.
          format: uri
          readOnly: true
        fields:
          description: The fields associated with the issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Fields'
      additionalProperties: false
      description: The ID or key of a linked issue.
    RichText:
      type: object
      properties:
        empty:
          type: boolean
        emptyAdf:
          type: boolean
        finalised:
          type: boolean
        valueSet:
          type: boolean
    TimeTrackingDetails:
      type: object
      properties:
        originalEstimate:
          type: string
          description: The original estimate of time needed for this issue in readable format.
          readOnly: true
        remainingEstimate:
          type: string
          description: The remaining estimate of time needed for this issue in readable format.
          readOnly: true
        timeSpent:
          type: string
          description: Time worked on this issue in readable format.
          readOnly: true
        originalEstimateSeconds:
          type: integer
          description: The original estimate of time needed for this issue in seconds.
          format: int64
          readOnly: true
        remainingEstimateSeconds:
          type: integer
          description: The remaining estimate of time needed for this issue in seconds.
          format: int64
          readOnly: true
        timeSpentSeconds:
          type: integer
          description: Time worked on this issue in seconds.
          format: int64
          readOnly: true
      additionalProperties: false
      description: Time tracking details.
    UserDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the user.
          readOnly: true
        name:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
          readOnly: true
        key:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
          readOnly: true
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        emailAddress:
          type: string
          description: The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
          readOnly: true
        avatarUrls:
          description: The avatars of the user.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        displayName:
          type: string
          description: The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
          readOnly: true
        active:
          type: boolean
          description: Whether the user is active.
          readOnly: true
        timeZone:
          type: string
          description: The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
          readOnly: true
        accountType:
          type: string
          description: The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
          readOnly: true
      additionalProperties: false
      description: |-
        User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:

         *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
         *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
         *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
    Visibility:
      type: object
      properties:
        type:
          type: string
          description: Whether visibility of this item is restricted to a group or role.
          enum:
            - group
            - role
        value:
          type: string
          description: The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`.
        identifier:
          type: string
          description: The ID of the group or the name of the role that visibility of this item is restricted to.
          nullable: true
      additionalProperties: true
      description: The group or role to which this item is visible.
    IssueLink:
      required:
        - inwardIssue
        - outwardIssue
        - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue link.
          readOnly: true
        self:
          type: string
          description: The URL of the issue link.
          format: uri
          readOnly: true
        type:
          description: The type of link between the issues.
          allOf:
            - $ref: '#/components/schemas/IssueLinkType'
        inwardIssue:
          description: Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
          allOf:
            - $ref: '#/components/schemas/LinkedIssue'
        outwardIssue:
          description: Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
          allOf:
            - $ref: '#/components/schemas/LinkedIssue'
      additionalProperties: false
      description: Details of a link between issues.
      xml:
        name: issueLinks
    PageOfWorklogs:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        worklogs:
          type: array
          description: List of worklogs.
          readOnly: true
          items:
            $ref: '#/components/schemas/Worklog'
      additionalProperties: true
      description: Paginated list of worklog details
    Worklog:
      type: object
      properties:
        self:
          type: string
          description: The URL of the worklog item.
          format: uri
          readOnly: true
        author:
          description: Details of the user who created the worklog.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        updateAuthor:
          description: Details of the user who last updated the worklog.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        comment:
          type: string
          description: A comment about the worklog. Optional when creating or updating a worklog.
        created:
          type: string
          description: The datetime on which the worklog was created.
          format: date-time
          readOnly: true
        updated:
          type: string
          description: The datetime on which the worklog was last updated.
          format: date-time
          readOnly: true
        visibility:
          description: Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
          allOf:
            - $ref: '#/components/schemas/Visibility'
        started:
          type: string
          description: The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
          format: date-time
        timeSpent:
          type: string
          description: The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
        timeSpentSeconds:
          type: integer
          description: The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
          format: int64
        id:
          type: string
          description: The ID of the worklog record.
          readOnly: true
        issueId:
          type: string
          description: The ID of the issue this worklog is for.
          readOnly: true
        properties:
          type: array
          description: Details of properties for the worklog. Optional when creating or updating a worklog.
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: true
      description: Details of a worklog.
      xml:
        name: worklog
    IssueTypeCreateBean:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The unique name for the issue type. The maximum length is 60 characters.
        description:
          type: string
          description: The description of the issue type.
        type:
          type: string
          description: |-
            Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.

            Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
          enum:
            - subtask
            - standard
        hierarchyLevel:
          type: integer
          description: |-
            The hierarchy level of the issue type. Use:

             *  `-1` for Subtask.
             *  `0` for Base.

            Defaults to `0`.
          format: int32
      additionalProperties: false
    IssueTypeUpdateBean:
      type: object
      properties:
        name:
          type: string
          description: The unique name for the issue type. The maximum length is 60 characters.
        description:
          type: string
          description: The description of the issue type.
        avatarId:
          type: integer
          description: The ID of an issue type avatar.
          format: int64
      additionalProperties: false
    SecuritySchemes:
      type: object
      properties:
        issueSecuritySchemes:
          type: array
          description: List of security schemes.
          readOnly: true
          items:
            $ref: '#/components/schemas/SecurityScheme'
      additionalProperties: false
      description: List of security schemes.
    IssueSecurityLevelMember:
      required:
        - holder
        - id
        - issueSecurityLevelId
      type: object
      properties:
        id:
          type: integer
          description: The ID of the issue security level member.
          format: int64
        issueSecurityLevelId:
          type: integer
          description: The ID of the issue security level.
          format: int64
        holder:
          description: The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
          allOf:
            - $ref: '#/components/schemas/PermissionHolder'
      additionalProperties: false
      description: Issue security level member.
    PageBeanIssueSecurityLevelMember:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueSecurityLevelMember'
      additionalProperties: false
      description: A page of items.
    FieldMetadata:
      required:
        - key
        - name
        - operations
        - required
        - schema
      type: object
      properties:
        required:
          type: boolean
          description: Whether the field is required.
          readOnly: true
        schema:
          description: The data type of the field.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/JsonTypeBean'
        name:
          type: string
          description: The name of the field.
          readOnly: true
        key:
          type: string
          description: The key of the field.
          readOnly: true
        autoCompleteUrl:
          type: string
          description: The URL that can be used to automatically complete the field.
          readOnly: true
        hasDefaultValue:
          type: boolean
          description: Whether the field has a default value.
          readOnly: true
        operations:
          type: array
          description: The list of operations that can be performed on the field.
          readOnly: true
          items:
            type: string
            readOnly: true
        allowedValues:
          type: array
          description: The list of values allowed in the field.
          readOnly: true
          items:
            readOnly: true
        defaultValue:
          description: The default value of the field.
          readOnly: true
        configuration:
          type: object
          additionalProperties:
            readOnly: true
          description: The configuration properties.
          readOnly: true
      additionalProperties: false
      description: The metadata describing an issue field.
      xml:
        name: availableField
    IssueTransition:
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue transition. Required when specifying a transition to undertake.
        name:
          type: string
          description: The name of the issue transition.
          readOnly: true
        to:
          description: Details of the issue status after the transition.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StatusDetails'
        hasScreen:
          type: boolean
          description: Whether there is a screen associated with the issue transition.
          readOnly: true
        isGlobal:
          type: boolean
          description: Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
          readOnly: true
        isInitial:
          type: boolean
          description: Whether this is the initial issue transition for the workflow.
          readOnly: true
        isAvailable:
          type: boolean
          description: Whether the transition is available to be performed.
          readOnly: true
        isConditional:
          type: boolean
          description: Whether the issue has to meet criteria before the issue transition is applied.
          readOnly: true
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
          description: Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
          readOnly: true
        expand:
          type: string
          description: Expand options that include additional transition details in the response.
          readOnly: true
        looped:
          type: boolean
      additionalProperties: true
      description: Details of an issue transition.
    JsonTypeBean:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The data type of the field.
          readOnly: true
        items:
          type: string
          description: When the data type is an array, the name of the field items within the array.
          readOnly: true
        system:
          type: string
          description: If the field is a system field, the name of the field.
          readOnly: true
        custom:
          type: string
          description: If the field is a custom field, the URI of the field.
          readOnly: true
        customId:
          type: integer
          description: If the field is a custom field, the custom ID of the field.
          format: int64
          readOnly: true
        configuration:
          type: object
          additionalProperties:
            readOnly: true
          description: If the field is a custom field, the configuration of the field.
          readOnly: true
      additionalProperties: false
      description: The schema of a field.
    Transitions:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional transitions details in the response.
          readOnly: true
          xml:
            attribute: true
        transitions:
          type: array
          description: List of issue transitions.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTransition'
      additionalProperties: false
      description: List of issue transitions.
    IssuePickerSuggestions:
      type: object
      properties:
        sections:
          type: array
          description: A list of issues for an issue type suggested for use in auto-completion.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssuePickerSuggestionsIssueType'
      additionalProperties: false
      description: A list of issues suggested for use in auto-completion.
    IssuePickerSuggestionsIssueType:
      type: object
      properties:
        label:
          type: string
          description: The label of the type of issues suggested for use in auto-completion.
          readOnly: true
        sub:
          type: string
          description: If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
          readOnly: true
        id:
          type: string
          description: The ID of the type of issues suggested for use in auto-completion.
          readOnly: true
        msg:
          type: string
          description: If no issue suggestions are found, returns a message indicating no suggestions were found,
          readOnly: true
        issues:
          type: array
          description: A list of issues suggested for use in auto-completion.
          readOnly: true
          items:
            $ref: '#/components/schemas/SuggestedIssue'
      additionalProperties: false
      description: A type of issue suggested for use in auto-completion.
    SuggestedIssue:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the issue.
          format: int64
          readOnly: true
        key:
          type: string
          description: The key of the issue.
          readOnly: true
        keyHtml:
          type: string
          description: The key of the issue in HTML format.
          readOnly: true
        img:
          type: string
          description: The URL of the issue type's avatar.
          readOnly: true
        summary:
          type: string
          description: The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
          readOnly: true
        summaryText:
          type: string
          description: The phrase containing the query string, as plain text.
          readOnly: true
      additionalProperties: false
      description: An issue suggested for use in the issue picker auto-completion.
    FieldUpdateOperation:
      type: object
      properties:
        add:
          description: The value to add to the field.
          example: triaged
        set:
          description: The value to set in the field.
          example: A new summary
        remove:
          description: The value to removed from the field.
          example: blocker
        edit:
          description: The value to edit in the field.
          example:
            remainingEstimate: 4d
            originalEstimate: 1w 1d
      additionalProperties: false
      description: Details of an operation to perform on a field.
    HistoryMetadata:
      type: object
      properties:
        type:
          type: string
          description: The type of the history record.
        description:
          type: string
          description: The description of the history record.
        descriptionKey:
          type: string
          description: The description key of the history record.
        activityDescription:
          type: string
          description: The activity described in the history record.
        activityDescriptionKey:
          type: string
          description: The key of the activity described in the history record.
        emailDescription:
          type: string
          description: The description of the email address associated the history record.
        emailDescriptionKey:
          type: string
          description: The description key of the email address associated the history record.
        actor:
          description: Details of the user whose action created the history record.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadataParticipant'
        generator:
          description: Details of the system that generated the history record.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadataParticipant'
        cause:
          description: Details of the cause that triggered the creation the history record.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadataParticipant'
        extraData:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary information about the history record.
      additionalProperties: true
      description: Details of issue history metadata.
    HistoryMetadataParticipant:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user or system associated with a history record.
        displayName:
          type: string
          description: The display name of the user or system associated with a history record.
        displayNameKey:
          type: string
          description: The key of the display name of the user or system associated with a history record.
        type:
          type: string
          description: The type of the user or system associated with a history record.
        avatarUrl:
          type: string
          description: The URL to an avatar for the user or system associated with a history record.
        url:
          type: string
          description: The URL of the user or system associated with a history record.
      additionalProperties: true
      description: Details of user or system associated with a issue history metadata item.
    IssueUpdateDetails:
      type: object
      properties:
        transition:
          description: Details of a transition. Required when performing a transition, optional when creating or editing an issue.
          allOf:
            - $ref: '#/components/schemas/IssueTransition'
        fields:
          type: object
          additionalProperties: {}
          description: List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
        update:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/FieldUpdateOperation'
          description: A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
        historyMetadata:
          description: Additional issue history details.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadata'
        properties:
          type: array
          description: Details of issue properties to be add or update.
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: true
      description: Details of an issue update request.
    Votes:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue vote details.
          format: uri
          readOnly: true
        votes:
          type: integer
          description: The number of votes on the issue.
          format: int64
          readOnly: true
        hasVoted:
          type: boolean
          description: Whether the user making this request has voted on the issue.
          readOnly: true
        voters:
          type: array
          description: List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
      additionalProperties: false
      description: The details of votes on an issue.
    ChangeDetails:
      type: object
      properties:
        field:
          type: string
          description: The name of the field changed.
          readOnly: true
        fieldtype:
          type: string
          description: The type of the field changed.
          readOnly: true
        fieldId:
          type: string
          description: The ID of the field changed.
          readOnly: true
        from:
          type: string
          description: The details of the original value.
          readOnly: true
        fromString:
          type: string
          description: The details of the original value as a string.
          readOnly: true
        to:
          type: string
          description: The details of the new value.
          readOnly: true
        toString:
          type: string
          description: The details of the new value as a string.
          readOnly: true
      additionalProperties: false
      description: A change item.
    Changelog:
      type: object
      properties:
        id:
          type: string
          description: The ID of the changelog.
          readOnly: true
        author:
          description: The user who made the change.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        created:
          type: string
          description: The date on which the change took place.
          format: date-time
          readOnly: true
        items:
          type: array
          description: The list of items changed.
          readOnly: true
          items:
            $ref: '#/components/schemas/ChangeDetails'
        historyMetadata:
          description: The history metadata associated with the changed.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/HistoryMetadata'
      additionalProperties: false
      description: A changelog.
    IncludedFields:
      type: object
      properties:
        included:
          uniqueItems: true
          type: array
          items:
            type: string
        actuallyIncluded:
          uniqueItems: true
          type: array
          items:
            type: string
        excluded:
          uniqueItems: true
          type: array
          items:
            type: string
      additionalProperties: false
    IssueBean:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional issue details in the response.
          readOnly: true
          xml:
            attribute: true
        id:
          type: string
          description: The ID of the issue.
          readOnly: true
        self:
          type: string
          description: The URL of the issue details.
          format: uri
          readOnly: true
        key:
          type: string
          description: The key of the issue.
          readOnly: true
        renderedFields:
          type: object
          additionalProperties:
            readOnly: true
          description: The rendered value of each field present on the issue.
          readOnly: true
        properties:
          type: object
          additionalProperties:
            readOnly: true
          description: Details of the issue properties identified in the request.
          readOnly: true
        names:
          type: object
          additionalProperties:
            type: string
            readOnly: true
          description: The ID and name of each field present on the issue.
          readOnly: true
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonTypeBean'
          description: The schema describing each field present on the issue.
          readOnly: true
        transitions:
          type: array
          description: The transitions that can be performed on the issue.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTransition'
        operations:
          description: The operations that can be performed on the issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Operations'
        editmeta:
          description: The metadata for the fields on the issue that can be amended.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/IssueUpdateMetadata'
        changelog:
          description: Details of changelogs associated with the issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PageOfChangelogs'
        versionedRepresentations:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              readOnly: true
            readOnly: true
          description: The versions of each field on the issue.
          readOnly: true
        fieldsToInclude:
          $ref: '#/components/schemas/IncludedFields'
        fields:
          type: object
          additionalProperties: {}
      additionalProperties: false
      description: Details about an issue.
      xml:
        name: issue
    IssueUpdateMetadata:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
          readOnly: true
      description: A list of editable field details.
    LinkGroup:
      type: object
      properties:
        id:
          type: string
        styleClass:
          type: string
        header:
          $ref: '#/components/schemas/SimpleLink'
        weight:
          type: integer
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/SimpleLink'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/LinkGroup'
      additionalProperties: false
      description: Details a link group, which defines issue operations.
    Operations:
      type: object
      properties:
        linkGroups:
          type: array
          description: Details of the link groups defining issue operations.
          readOnly: true
          items:
            $ref: '#/components/schemas/LinkGroup'
      additionalProperties: true
      description: Details of the operations that can be performed on the issue.
    PageOfChangelogs:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        histories:
          type: array
          description: The list of changelogs.
          readOnly: true
          items:
            $ref: '#/components/schemas/Changelog'
      additionalProperties: false
      description: A page of changelogs.
    IssueList:
      required:
        - issueIds
      type: object
      properties:
        issueIds:
          type: array
          description: The list of issue IDs.
          items:
            type: string
      additionalProperties: false
      description: A list of issue IDs.
    BulkIssueIsWatching:
      type: object
      properties:
        issuesIsWatching:
          type: object
          additionalProperties:
            type: boolean
            readOnly: true
          description: The map of issue ID to boolean watch status.
          readOnly: true
      additionalProperties: false
      description: A container for the watch status of a list of issues.
    Watchers:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue watcher details.
          readOnly: true
        isWatching:
          type: boolean
          description: Whether the calling user is watching this issue.
          readOnly: true
        watchCount:
          type: integer
          description: The number of users watching this issue.
          format: int32
          readOnly: true
        watchers:
          type: array
          description: Details of the users watching this issue.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserDetails'
      additionalProperties: false
      description: The details of watchers on an issue.
      xml:
        name: watchers
    CreatedIssue:
      type: object
      properties:
        id:
          type: string
          description: The ID of the created issue or subtask.
          readOnly: true
        key:
          type: string
          description: The key of the created issue or subtask.
          readOnly: true
        self:
          type: string
          description: The URL of the created issue or subtask.
          readOnly: true
        transition:
          description: The response code and messages related to any requested transition.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/NestedResponse'
      additionalProperties: false
      description: Details about a created issue or subtask.
    NestedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        errorCollection:
          $ref: '#/components/schemas/ErrorCollection'
      additionalProperties: false
    IssuesUpdateBean:
      type: object
      properties:
        issueUpdates:
          type: array
          items:
            $ref: '#/components/schemas/IssueUpdateDetails'
      additionalProperties: true
    BulkOperationErrorResult:
      type: object
      properties:
        status:
          type: integer
          format: int32
        elementErrors:
          $ref: '#/components/schemas/ErrorCollection'
        failedElementNumber:
          type: integer
          format: int32
      additionalProperties: false
    CreatedIssues:
      type: object
      properties:
        issues:
          type: array
          description: Details of the issues created.
          readOnly: true
          items:
            $ref: '#/components/schemas/CreatedIssue'
        errors:
          type: array
          description: Error details for failed issue creation requests.
          readOnly: true
          items:
            $ref: '#/components/schemas/BulkOperationErrorResult'
      additionalProperties: false
      description: Details about the issues created and the errors for requests that failed.
    IssueCreateMetadata:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional project details in the response.
          readOnly: true
          xml:
            attribute: true
        projects:
          type: array
          description: List of projects and their issue creation metadata.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectIssueCreateMetadata'
      additionalProperties: false
      description: The wrapper for the issue creation metadata for a list of projects.
    IssueTypeIssueCreateMetadata:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue type details.
          readOnly: true
        id:
          type: string
          description: The ID of the issue type.
          readOnly: true
        description:
          type: string
          description: The description of the issue type.
          readOnly: true
        iconUrl:
          type: string
          description: The URL of the issue type's avatar.
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        subtask:
          type: boolean
          description: Whether this issue type is used to create subtasks.
          readOnly: true
        avatarId:
          type: integer
          description: The ID of the issue type's avatar.
          format: int64
          readOnly: true
        entityId:
          type: string
          description: Unique ID for next-gen projects.
          format: uuid
          readOnly: true
        hierarchyLevel:
          type: integer
          description: Hierarchy level of the issue type.
          format: int32
          readOnly: true
        scope:
          description: Details of the next-gen projects the issue type is available in.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        expand:
          type: string
          description: Expand options that include additional issue type metadata details in the response.
          readOnly: true
          xml:
            attribute: true
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
          description: List of the fields available when creating an issue for the issue type.
          readOnly: true
      additionalProperties: false
      description: Details of the issue creation metadata for an issue type.
    ProjectIssueCreateMetadata:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional project issue create metadata details in the response.
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the project.
          readOnly: true
        id:
          type: string
          description: The ID of the project.
          readOnly: true
        key:
          type: string
          description: The key of the project.
          readOnly: true
        name:
          type: string
          description: The name of the project.
          readOnly: true
        avatarUrls:
          description: List of the project's avatars, returning the avatar size and associated URL.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        issuetypes:
          type: array
          description: List of the issue types supported by the project.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeIssueCreateMetadata'
      additionalProperties: false
      description: Details of the issue creation metadata for a project.
    Application:
      type: object
      properties:
        type:
          type: string
          description: The name-spaced type of the application, used by registered rendering apps.
        name:
          type: string
          description: The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last.
      additionalProperties: true
      description: The application the linked item is in.
    IconBean:
      type: object
      properties:
        url16x16:
          type: string
          description: The URL of a 16x16 pixel icon.
        title:
          type: string
          description: The title of the icon, for use as a tooltip on the icon.
        link:
          type: string
          description: The URL of the tooltip, used only for a status icon.
      additionalProperties: false
      description: An icon.
      xml:
        name: icon
    RemoteIssueLink:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the link.
          format: int64
        self:
          type: string
          description: The URL of the link.
          format: uri
        globalId:
          type: string
          description: The global ID of the link, such as the ID of the item on the remote system.
        application:
          description: Details of the remote application the linked item is in.
          allOf:
            - $ref: '#/components/schemas/Application'
        relationship:
          type: string
          description: Description of the relationship between the issue and the linked item.
        object:
          description: Details of the item linked to.
          allOf:
            - $ref: '#/components/schemas/RemoteObject'
      additionalProperties: false
      description: Details of an issue remote link.
    RemoteObject:
      required:
        - title
        - url
      type: object
      properties:
        url:
          type: string
          description: The URL of the item.
        title:
          type: string
          description: The title of the item.
        summary:
          type: string
          description: The summary details of the item.
        icon:
          description: Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
          allOf:
            - $ref: '#/components/schemas/Icon'
        status:
          description: The status of the item.
          allOf:
            - $ref: '#/components/schemas/Status'
      additionalProperties: true
      description: The linked item.
    Status:
      type: object
      properties:
        resolved:
          type: boolean
          description: Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
        icon:
          description: Details of the icon representing the status. If not provided, no status icon displays in Jira.
          allOf:
            - $ref: '#/components/schemas/Icon'
      additionalProperties: true
      description: The status of the item.
    Icon:
      type: object
      properties:
        url16x16:
          type: string
          description: The URL of an icon that displays at 16x16 pixel in Jira.
        title:
          type: string
          description: |-
            The title of the icon. This is used as follows:

             *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
             *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
        link:
          type: string
          description: The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
      additionalProperties: true
      description: |-
        An icon. If no icon is defined:

         *  for a status icon, no status icon displays in Jira.
         *  for the remote object icon, the default link icon displays in Jira.
    RemoteIssueLinkRequest:
      required:
        - object
      type: object
      properties:
        globalId:
          type: string
          description: |-
            An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.

            Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.

            The maximum length is 255 characters.
        application:
          description: Details of the remote application the linked item is in. For example, trello.
          allOf:
            - $ref: '#/components/schemas/Application'
        relationship:
          type: string
          description: Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira.
        object:
          description: Details of the item linked to.
          allOf:
            - $ref: '#/components/schemas/RemoteObject'
      additionalProperties: true
      description: Details of a remote issue link.
    RemoteIssueLinkIdentifies:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the remote issue link, such as the ID of the item on the remote system.
          format: int64
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the remote issue link.
          readOnly: true
          xml:
            attribute: true
      additionalProperties: false
      description: Details of the identifiers for a created or updated remote issue link.
    Notification:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
        textBody:
          type: string
          description: The plain text body of the email notification for the issue.
        htmlBody:
          type: string
          description: The HTML body of the email notification for the issue.
        to:
          description: The recipients of the email notification for the issue.
          allOf:
            - $ref: '#/components/schemas/NotificationRecipients'
        restrict:
          description: Restricts the notifications to users with the specified permissions.
          allOf:
            - $ref: '#/components/schemas/NotificationRecipientsRestrictions'
      additionalProperties: true
      description: Details about a notification.
    NotificationRecipients:
      type: object
      properties:
        reporter:
          type: boolean
          description: Whether the notification should be sent to the issue's reporter.
        assignee:
          type: boolean
          description: Whether the notification should be sent to the issue's assignees.
        watchers:
          type: boolean
          description: Whether the notification should be sent to the issue's watchers.
        voters:
          type: boolean
          description: Whether the notification should be sent to the issue's voters.
        users:
          type: array
          description: List of users to receive the notification.
          items:
            $ref: '#/components/schemas/UserDetails'
        groups:
          type: array
          description: List of groups to receive the notification.
          items:
            $ref: '#/components/schemas/GroupName'
        groupIds:
          type: array
          description: List of groupIds to receive the notification.
          items:
            type: string
      additionalProperties: true
      description: Details of the users and groups to receive the notification.
    NotificationRecipientsRestrictions:
      type: object
      properties:
        groups:
          type: array
          description: List of group memberships required to receive the notification.
          items:
            $ref: '#/components/schemas/GroupName'
        groupIds:
          type: array
          description: List of groupId memberships required to receive the notification.
          items:
            type: string
        permissions:
          type: array
          description: List of permissions required to receive the notification.
          items:
            $ref: '#/components/schemas/RestrictedPermission'
      additionalProperties: false
      description: Details of the group membership or permissions needed to receive the notification.
    RestrictedPermission:
      type: object
      properties:
        id:
          type: string
          description: The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        key:
          type: string
          description: The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
      additionalProperties: true
      description: Details of the permission.
    IssueLinkTypes:
      type: object
      properties:
        issueLinkTypes:
          type: array
          description: The issue link type bean.
          readOnly: true
          xml:
            name: issueLinkTypes
          items:
            $ref: '#/components/schemas/IssueLinkType'
      additionalProperties: false
      description: A list of issue link type beans.
      xml:
        name: issueLinkTypes
    PageOfComments:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        comments:
          type: array
          description: The list of comments.
          readOnly: true
          items:
            $ref: '#/components/schemas/Comment'
      additionalProperties: true
      description: A page of comments.
    PaginatedResponseComment:
      type: object
      properties:
        total:
          type: integer
          format: int64
        startAt:
          type: integer
          format: int64
        maxResults:
          type: integer
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      additionalProperties: false
    IssueCommentListRequestBean:
      required:
        - ids
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          description: The list of comment IDs. A maximum of 1000 IDs can be specified.
          items:
            type: integer
            format: int64
      additionalProperties: false
    PageBeanComment:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Comment'
      additionalProperties: false
      description: A page of items.
    PageBeanChangelog:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Changelog'
      additionalProperties: false
      description: A page of items.
    IssueChangelogIds:
      required:
        - changelogIds
      type: object
      properties:
        changelogIds:
          uniqueItems: true
          type: array
          description: The list of changelog IDs.
          items:
            type: integer
            format: int64
      additionalProperties: false
      description: A list of changelog IDs.
    Attachment:
      type: object
      properties:
        self:
          type: string
          description: The URL of the attachment details response.
          readOnly: true
        id:
          type: string
          description: The ID of the attachment.
          readOnly: true
        filename:
          type: string
          description: The file name of the attachment.
          readOnly: true
        author:
          description: Details of the user who added the attachment.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        created:
          type: string
          description: The datetime the attachment was created.
          format: date-time
          readOnly: true
        size:
          type: integer
          description: The size of the attachment.
          format: int64
          readOnly: true
        mimeType:
          type: string
          description: The MIME type of the attachment.
          readOnly: true
        content:
          type: string
          description: The content of the attachment.
          readOnly: true
        thumbnail:
          type: string
          description: The URL of a thumbnail representing the attachment.
          readOnly: true
      additionalProperties: true
      description: Details about an attachment.
    Group:
      type: object
      properties:
        name:
          type: string
          description: The name of group.
        groupId:
          type: string
          description: The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
          nullable: true
        self:
          type: string
          description: The URL for these group details.
          format: uri
          readOnly: true
        users:
          description: A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PagedListUserDetailsApplicationUser'
        expand:
          type: string
          description: Expand options that include additional group details in the response.
          readOnly: true
          xml:
            attribute: true
      additionalProperties: false
    PagedListUserDetailsApplicationUser:
      type: object
      properties:
        size:
          type: integer
          description: The number of items on the page.
          format: int32
          readOnly: true
          xml:
            attribute: true
        items:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserDetails'
        max-results:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
          xml:
            name: max-results
            attribute: true
        start-index:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: start-index
            attribute: true
        end-index:
          type: integer
          description: The index of the last item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: end-index
            attribute: true
      additionalProperties: false
      description: A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40.
    PageBeanUserDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserDetails'
      additionalProperties: false
      description: A page of items.
    AddGroupBean:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the group.
      additionalProperties: true
    UpdateUserToGroupBean:
      type: object
      properties:
        name:
          type: string
          description: This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
      additionalProperties: true
    FoundGroup:
      type: object
      properties:
        name:
          type: string
          description: The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`
        html:
          type: string
          description: The group name with the matched query string highlighted with the HTML bold tag.
        labels:
          type: array
          items:
            $ref: '#/components/schemas/GroupLabel'
        groupId:
          type: string
          description: The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
      additionalProperties: false
      description: A group found in a search.
      xml:
        name: group
    FoundGroups:
      type: object
      properties:
        header:
          type: string
          description: Header text indicating the number of groups in the response and the total number of groups found in the search.
        total:
          type: integer
          description: The total number of groups found in the search.
          format: int32
        groups:
          type: array
          items:
            $ref: '#/components/schemas/FoundGroup'
      additionalProperties: false
      description: The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups.
      xml:
        name: groupsuggestions
    GroupLabel:
      type: object
      properties:
        text:
          type: string
          description: The group label name.
        title:
          type: string
          description: The title of the group label.
        type:
          type: string
          description: The type of the group label.
          enum:
            - ADMIN
            - SINGLE
            - MULTIPLE
      additionalProperties: false
      description: A group label.
      xml:
        name: grouplabel
    FoundUsersAndGroups:
      type: object
      properties:
        users:
          $ref: '#/components/schemas/FoundUsers'
        groups:
          $ref: '#/components/schemas/FoundGroups'
      additionalProperties: false
      description: List of users and groups found in a search.
    FieldDetails:
      type: object
      properties:
        id:
          type: string
          description: The ID of the field.
        key:
          type: string
          description: The key of the field.
        name:
          type: string
          description: The name of the field.
        custom:
          type: boolean
          description: Whether the field is a custom field.
        orderable:
          type: boolean
          description: Whether the content of the field can be used to order lists.
        navigable:
          type: boolean
          description: Whether the field can be used as a column on the issue navigator.
        searchable:
          type: boolean
          description: Whether the content of the field can be searched.
        clauseNames:
          uniqueItems: true
          type: array
          description: The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
          items:
            type: string
        scope:
          description: The scope of the field.
          allOf:
            - $ref: '#/components/schemas/Scope'
        schema:
          description: The data schema for the field.
          allOf:
            - $ref: '#/components/schemas/JsonTypeBean'
      additionalProperties: false
      description: Details about a field.
      xml:
        name: field
    CustomFieldDefinitionJsonBean:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
          description: The name of the custom field, which is displayed in Jira. This is not the unique identifier.
        description:
          type: string
          description: The description of the custom field, which is displayed in Jira.
        type:
          type: string
          description: |-
            The type of the custom field. These built-in custom field types are available:

             *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
             *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
             *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
             *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
             *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
             *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
             *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
             *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
             *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
             *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
             *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
             *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
             *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
             *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
             *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
             *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
             *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
             *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
             *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
             *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
             *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)

            To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
        searcherKey:
          type: string
          description: |-
            The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.  
            The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):

             *  `cascadingselect`: `cascadingselectsearcher`
             *  `datepicker`: `daterange`
             *  `datetime`: `datetimerange`
             *  `float`: `exactnumber` or `numberrange`
             *  `grouppicker`: `grouppickersearcher`
             *  `importid`: `exactnumber` or `numberrange`
             *  `labels`: `labelsearcher`
             *  `multicheckboxes`: `multiselectsearcher`
             *  `multigrouppicker`: `multiselectsearcher`
             *  `multiselect`: `multiselectsearcher`
             *  `multiuserpicker`: `userpickergroupsearcher`
             *  `multiversion`: `versionsearcher`
             *  `project`: `projectsearcher`
             *  `radiobuttons`: `multiselectsearcher`
             *  `readonlyfield`: `textsearcher`
             *  `select`: `multiselectsearcher`
             *  `textarea`: `textsearcher`
             *  `textfield`: `textsearcher`
             *  `url`: `exacttextsearcher`
             *  `userpicker`: `userpickergroupsearcher`
             *  `version`: `versionsearcher`

            If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
          enum:
            - com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:daterange
            - com.atlassian.jira.plugin.system.customfieldtypes:datetimerange
            - com.atlassian.jira.plugin.system.customfieldtypes:exactnumber
            - com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:numberrange
            - com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:textsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher
      additionalProperties: false
    UpdateCustomFieldDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters.
        description:
          type: string
          description: The description of the custom field. The maximum length is 40000 characters.
        searcherKey:
          type: string
          description: |-
            The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):

             *  `cascadingselect`: `cascadingselectsearcher`
             *  `datepicker`: `daterange`
             *  `datetime`: `datetimerange`
             *  `float`: `exactnumber` or `numberrange`
             *  `grouppicker`: `grouppickersearcher`
             *  `importid`: `exactnumber` or `numberrange`
             *  `labels`: `labelsearcher`
             *  `multicheckboxes`: `multiselectsearcher`
             *  `multigrouppicker`: `multiselectsearcher`
             *  `multiselect`: `multiselectsearcher`
             *  `multiuserpicker`: `userpickergroupsearcher`
             *  `multiversion`: `versionsearcher`
             *  `project`: `projectsearcher`
             *  `radiobuttons`: `multiselectsearcher`
             *  `readonlyfield`: `textsearcher`
             *  `select`: `multiselectsearcher`
             *  `textarea`: `textsearcher`
             *  `textfield`: `textsearcher`
             *  `url`: `exacttextsearcher`
             *  `userpicker`: `userpickergroupsearcher`
             *  `version`: `versionsearcher`
          enum:
            - com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:daterange
            - com.atlassian.jira.plugin.system.customfieldtypes:datetimerange
            - com.atlassian.jira.plugin.system.customfieldtypes:exactnumber
            - com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:numberrange
            - com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:textsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher
            - com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher
      additionalProperties: false
      description: Details of a custom field.
      writeOnly: true
    PageBeanScreenWithTab:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ScreenWithTab'
      additionalProperties: false
      description: A page of items.
    ScreenWithTab:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the screen.
          readOnly: true
        description:
          type: string
          description: The description of the screen.
          readOnly: true
        scope:
          description: The scope of the screen.
          allOf:
            - $ref: '#/components/schemas/Scope'
        tab:
          description: The tab for the screen.
          allOf:
            - $ref: '#/components/schemas/ScreenableTab'
      additionalProperties: false
      description: A screen with tab details.
    Context:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the context.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the context.
          readOnly: true
        scope:
          description: The scope of the context.
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: A context.
    PageBeanContext:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Context'
      additionalProperties: false
      description: A page of items.
    CustomFieldContextOption:
      required:
        - disabled
        - id
        - value
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom field option.
        value:
          type: string
          description: The value of the custom field option.
        optionId:
          type: string
          description: For cascading options, the ID of the custom field option containing the cascading option.
        disabled:
          type: boolean
          description: Whether the option is disabled.
      additionalProperties: false
      description: Details of the custom field options for a context.
    PageBeanCustomFieldContextOption:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomFieldContextOption'
      additionalProperties: false
      description: A page of items.
    BulkCustomFieldOptionCreateRequest:
      type: object
      properties:
        options:
          type: array
          description: Details of options to create.
          items:
            $ref: '#/components/schemas/CustomFieldOptionCreate'
      additionalProperties: false
      description: Details of the options to create for a custom field.
      writeOnly: true
    CustomFieldOptionCreate:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: The value of the custom field option.
        optionId:
          type: string
          description: For cascading options, the ID of the custom field object containing the cascading option.
        disabled:
          type: boolean
          description: Whether the option is disabled.
      additionalProperties: false
      description: Details of a custom field option to create.
    CustomFieldCreatedContextOptionsList:
      type: object
      properties:
        options:
          type: array
          description: The created custom field options.
          items:
            $ref: '#/components/schemas/CustomFieldContextOption'
      additionalProperties: false
      description: A list of custom field options for a context.
    OrderOfCustomFieldOptions:
      required:
        - customFieldOptionIds
      type: object
      properties:
        customFieldOptionIds:
          type: array
          description: A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.
          writeOnly: true
          items:
            type: string
            writeOnly: true
        after:
          type: string
          description: The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.
          writeOnly: true
        position:
          type: string
          description: The position the custom field options should be moved to. Required if `after` isn't provided.
          writeOnly: true
          enum:
            - First
            - Last
      additionalProperties: false
      description: An ordered list of custom field option IDs and information on where to move them.
    BulkCustomFieldOptionUpdateRequest:
      type: object
      properties:
        options:
          type: array
          description: Details of the options to update.
          items:
            $ref: '#/components/schemas/CustomFieldOptionUpdate'
      additionalProperties: false
      description: Details of the options to update for a custom field.
      writeOnly: true
    CustomFieldOptionUpdate:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom field option.
        value:
          type: string
          description: The value of the custom field option.
        disabled:
          type: boolean
          description: Whether the option is disabled.
      additionalProperties: false
      description: Details of a custom field option for a context.
    CustomFieldUpdatedContextOptionsList:
      type: object
      properties:
        options:
          type: array
          description: The updated custom field options.
          items:
            $ref: '#/components/schemas/CustomFieldOptionUpdate'
      additionalProperties: false
      description: A list of custom field options for a context.
    ComponentIssuesCount:
      type: object
      properties:
        self:
          type: string
          description: The URL for this count of issues for a component.
          format: uri
          readOnly: true
        issueCount:
          type: integer
          description: The count of issues assigned to a component.
          format: int64
          readOnly: true
      additionalProperties: false
      description: Count of issues assigned to a component.
      xml:
        name: component
    SystemAvatars:
      type: object
      properties:
        system:
          type: array
          description: A list of avatar details.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
      additionalProperties: false
      description: List of system avatars.
    PageBeanUiModificationDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UiModificationDetails'
      additionalProperties: false
      description: A page of items.
    UiModificationContextDetails:
      required:
        - issueTypeId
        - projectId
        - viewType
      type: object
      properties:
        id:
          type: string
          description: The ID of the UI modification context.
          readOnly: true
        projectId:
          type: string
          description: The project ID of the context.
        issueTypeId:
          type: string
          description: The issue type ID of the context.
        viewType:
          type: string
          description: The view type of the context. Only `GIC` (Global Issue Create) is supported.
        isAvailable:
          type: boolean
          description: Whether a context is available. For example, when a project is deleted the context becomes unavailable.
          readOnly: true
      additionalProperties: false
      description: The details of a UI modification's context, which define where to activate the UI modification.
      writeOnly: true
    UiModificationDetails:
      required:
        - id
        - name
        - self
      type: object
      properties:
        id:
          type: string
          description: The ID of the UI modification.
          readOnly: true
        name:
          type: string
          description: The name of the UI modification. The maximum length is 255 characters.
          readOnly: true
        description:
          type: string
          description: The description of the UI modification. The maximum length is 255 characters.
          readOnly: true
        self:
          type: string
          description: The URL of the UI modification.
          readOnly: true
        data:
          type: string
          description: The data of the UI modification. The maximum size of the data is 50000 characters.
          readOnly: true
        contexts:
          type: array
          description: List of contexts of the UI modification. The maximum number of contexts is 1000.
          readOnly: true
          items:
            $ref: '#/components/schemas/UiModificationContextDetails'
      additionalProperties: false
      description: The details of a UI modification.
    CreateUiModificationDetails:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the UI modification. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the UI modification. The maximum length is 255 characters.
          writeOnly: true
        data:
          type: string
          description: The data of the UI modification. The maximum size of the data is 50000 characters.
          writeOnly: true
        contexts:
          type: array
          description: List of contexts of the UI modification. The maximum number of contexts is 1000.
          writeOnly: true
          items:
            $ref: '#/components/schemas/UiModificationContextDetails'
      additionalProperties: false
      description: The details of a UI modification.
    UiModificationIdentifiers:
      required:
        - id
        - self
      type: object
      properties:
        id:
          type: string
          description: The ID of the UI modification.
          readOnly: true
        self:
          type: string
          description: The URL of the UI modification.
          readOnly: true
      additionalProperties: false
      description: Identifiers for a UI modification.
    UpdateUiModificationDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the UI modification. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the UI modification. The maximum length is 255 characters.
          writeOnly: true
        data:
          type: string
          description: The data of the UI modification. The maximum size of the data is 50000 characters.
          writeOnly: true
        contexts:
          type: array
          description: List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts.
          writeOnly: true
          items:
            $ref: '#/components/schemas/UiModificationContextDetails'
      additionalProperties: false
      description: The details of a UI modification.
    IssueTypeScheme:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue type scheme.
        name:
          type: string
          description: The name of the issue type scheme.
        description:
          type: string
          description: The description of the issue type scheme.
        defaultIssueTypeId:
          type: string
          description: The ID of the default issue type of the issue type scheme.
        isDefault:
          type: boolean
          description: Whether the issue type scheme is the default.
      additionalProperties: false
      description: Details of an issue type scheme.
    PageBeanIssueTypeScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeScheme'
      additionalProperties: false
      description: A page of items.
    IssueTypeSchemeProjects:
      required:
        - issueTypeScheme
        - projectIds
      type: object
      properties:
        issueTypeScheme:
          description: Details of an issue type scheme.
          allOf:
            - $ref: '#/components/schemas/IssueTypeScheme'
        projectIds:
          type: array
          description: The IDs of the projects using the issue type scheme.
          items:
            type: string
      additionalProperties: false
      description: Issue type scheme with a list of the projects that use it.
    PageBeanIssueTypeSchemeProjects:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeSchemeProjects'
      additionalProperties: false
      description: A page of items.
    IssueTypeSchemeMapping:
      required:
        - issueTypeId
        - issueTypeSchemeId
      type: object
      properties:
        issueTypeSchemeId:
          type: string
          description: The ID of the issue type scheme.
        issueTypeId:
          type: string
          description: The ID of the issue type.
      additionalProperties: false
      description: Issue type scheme item.
    PageBeanIssueTypeSchemeMapping:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeSchemeMapping'
      additionalProperties: false
      description: A page of items.
    IssueTypeSchemeProjectAssociation:
      required:
        - issueTypeSchemeId
        - projectId
      type: object
      properties:
        issueTypeSchemeId:
          type: string
          description: The ID of the issue type scheme.
          writeOnly: true
        projectId:
          type: string
          description: The ID of the project.
          writeOnly: true
      additionalProperties: false
      description: Details of the association between an issue type scheme and project.
    IssueTypeSchemeDetails:
      required:
        - issueTypeIds
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the issue type scheme. The maximum length is 4000 characters.
          writeOnly: true
        defaultIssueTypeId:
          type: string
          description: The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
          writeOnly: true
        issueTypeIds:
          type: array
          description: The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
          writeOnly: true
          items:
            type: string
            writeOnly: true
      additionalProperties: false
      description: Details of an issue type scheme and its associated issue types.
    IssueTypeSchemeID:
      required:
        - issueTypeSchemeId
      type: object
      properties:
        issueTypeSchemeId:
          type: string
          description: The ID of the issue type scheme.
          readOnly: true
      additionalProperties: false
      description: The ID of an issue type scheme.
    IssueTypeIds:
      required:
        - issueTypeIds
      type: object
      properties:
        issueTypeIds:
          type: array
          description: The list of issue type IDs.
          writeOnly: true
          items:
            type: string
            writeOnly: true
      additionalProperties: false
      description: The list of issue type IDs.
    IssueTypeSchemeUpdateDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the issue type scheme. The maximum length is 4000 characters.
          writeOnly: true
        defaultIssueTypeId:
          type: string
          description: The ID of the default issue type of the issue type scheme.
          writeOnly: true
      additionalProperties: false
      description: Details of the name, description, and default issue type for an issue type scheme.
    OrderOfIssueTypes:
      required:
        - issueTypeIds
      type: object
      properties:
        issueTypeIds:
          type: array
          description: A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
          writeOnly: true
          items:
            type: string
            writeOnly: true
        after:
          type: string
          description: The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
          writeOnly: true
        position:
          type: string
          description: The position the issue types should be moved to. Required if `after` isn't provided.
          writeOnly: true
          enum:
            - First
            - Last
      additionalProperties: false
      description: An ordered list of issue type IDs and information about where to move them.
    CustomFieldOption:
      type: object
      properties:
        self:
          type: string
          description: The URL of these custom field option details.
          format: uri
          readOnly: true
        value:
          type: string
          description: The value of the custom field option.
          readOnly: true
      additionalProperties: false
      description: Details of a custom option for a field.
      xml:
        name: customFieldOption
    CustomFieldContextProjectMapping:
      required:
        - contextId
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
          readOnly: true
        projectId:
          type: string
          description: The ID of the project.
          readOnly: true
        isGlobalContext:
          type: boolean
          description: Whether context is global.
          readOnly: true
      additionalProperties: false
      description: Details of a context to project association.
    PageBeanCustomFieldContextProjectMapping:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomFieldContextProjectMapping'
      additionalProperties: false
      description: A page of items.
    CustomFieldContext:
      required:
        - description
        - id
        - isAnyIssueType
        - isGlobalContext
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the context.
        name:
          type: string
          description: The name of the context.
        description:
          type: string
          description: The description of the context.
        isGlobalContext:
          type: boolean
          description: Whether the context is global.
        isAnyIssueType:
          type: boolean
          description: Whether the context apply to all issue types.
      additionalProperties: false
      description: The details of a custom field context.
    PageBeanCustomFieldContext:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomFieldContext'
      additionalProperties: false
      description: A page of items.
    CustomFieldContextDefaultValue:
      type: object
      additionalProperties: false
      discriminator:
        propertyName: type
        mapping:
          option.cascading: '#/components/schemas/CustomFieldContextDefaultValueCascadingOption'
          option.multiple: '#/components/schemas/CustomFieldContextDefaultValueMultipleOption'
          option.single: '#/components/schemas/CustomFieldContextDefaultValueSingleOption'
          single.user.select: '#/components/schemas/CustomFieldContextSingleUserPickerDefaults'
          multi.user.select: '#/components/schemas/CustomFieldContextDefaultValueMultiUserPicker'
          grouppicker.single: '#/components/schemas/CustomFieldContextDefaultValueSingleGroupPicker'
          grouppicker.multiple: '#/components/schemas/CustomFieldContextDefaultValueMultipleGroupPicker'
          datepicker: '#/components/schemas/CustomFieldContextDefaultValueDate'
          datetimepicker: '#/components/schemas/CustomFieldContextDefaultValueDateTime'
          url: '#/components/schemas/CustomFieldContextDefaultValueURL'
          project: '#/components/schemas/CustomFieldContextDefaultValueProject'
          float: '#/components/schemas/CustomFieldContextDefaultValueFloat'
          labels: '#/components/schemas/CustomFieldContextDefaultValueLabels'
          textfield: '#/components/schemas/CustomFieldContextDefaultValueTextField'
          textarea: '#/components/schemas/CustomFieldContextDefaultValueTextArea'
          readonly: '#/components/schemas/CustomFieldContextDefaultValueReadOnly'
          version.single: '#/components/schemas/CustomFieldContextDefaultValueSingleVersionPicker'
          version.multiple: '#/components/schemas/CustomFieldContextDefaultValueMultipleVersionPicker'
          forge.string: '#/components/schemas/CustomFieldContextDefaultValueForgeStringField'
          forge.string.list: '#/components/schemas/CustomFieldContextDefaultValueForgeMultiStringField'
          forge.object: '#/components/schemas/CustomFieldContextDefaultValueForgeObjectField'
          forge.datetime: '#/components/schemas/CustomFieldContextDefaultValueForgeDateTimeField'
          forge.group: '#/components/schemas/CustomFieldContextDefaultValueForgeGroupField'
          forge.group.list: '#/components/schemas/CustomFieldContextDefaultValueForgeMultiGroupField'
          forge.number: '#/components/schemas/CustomFieldContextDefaultValueForgeNumberField'
          forge.user: '#/components/schemas/CustomFieldContextDefaultValueForgeUserField'
          forge.user.list: '#/components/schemas/CustomFieldContextDefaultValueForgeMultiUserField'
      oneOf:
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueCascadingOption'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueMultipleOption'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueSingleOption'
        - $ref: '#/components/schemas/CustomFieldContextSingleUserPickerDefaults'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueMultiUserPicker'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueSingleGroupPicker'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueMultipleGroupPicker'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueDate'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueDateTime'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueURL'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueProject'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueFloat'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueLabels'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueTextField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueTextArea'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueReadOnly'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueSingleVersionPicker'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueMultipleVersionPicker'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeStringField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeMultiStringField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeObjectField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeDateTimeField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeGroupField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeMultiGroupField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeNumberField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeUserField'
        - $ref: '#/components/schemas/CustomFieldContextDefaultValueForgeMultiUserField'
    CustomFieldContextDefaultValueCascadingOption:
      required:
        - contextId
        - optionId
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        optionId:
          type: string
          description: The ID of the default option.
        cascadingOptionId:
          type: string
          description: The ID of the default cascading option.
        type:
          type: string
      description: The default value for a cascading select custom field.
    CustomFieldContextDefaultValueDate:
      required:
        - type
      type: object
      properties:
        date:
          type: string
          description: The default date in ISO format. Ignored if `useCurrent` is true.
        useCurrent:
          type: boolean
          description: Whether to use the current date.
          default: false
        type:
          type: string
      description: The default value for a Date custom field.
    CustomFieldContextDefaultValueDateTime:
      required:
        - type
      type: object
      properties:
        dateTime:
          type: string
          description: The default date-time in ISO format. Ignored if `useCurrent` is true.
        useCurrent:
          type: boolean
          description: Whether to use the current date.
          default: false
        type:
          type: string
      description: The default value for a date time custom field.
    CustomFieldContextDefaultValueFloat:
      required:
        - number
        - type
      type: object
      properties:
        number:
          type: number
          description: The default floating-point number.
          format: double
        type:
          type: string
      description: Default value for a float (number) custom field.
    CustomFieldContextDefaultValueForgeDateTimeField:
      type: object
      properties:
        dateTime:
          type: string
          description: The default date-time in ISO format. Ignored if `useCurrent` is true.
        useCurrent:
          type: boolean
          description: Whether to use the current date.
          default: false
      description: The default value for a Forge date time custom field.
    CustomFieldContextDefaultValueForgeGroupField:
      required:
        - contextId
        - groupId
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        groupId:
          type: string
          description: The ID of the the default group.
      description: The default value for a Forge group custom field.
    CustomFieldContextDefaultValueForgeMultiGroupField:
      required:
        - contextId
        - groupIds
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        groupIds:
          uniqueItems: true
          type: array
          description: The IDs of the default groups.
          items:
            type: string
            description: The IDs of the default groups.
      description: The default value for a Forge collection of groups custom field.
    CustomFieldContextDefaultValueForgeMultiStringField:
      required:
        - type
      type: object
      properties:
        values:
          type: array
          description: List of string values. The maximum length for a value is 254 characters.
          items:
            type: string
            description: List of string values. The maximum length for a value is 254 characters.
        type:
          type: string
      description: The default text for a Forge collection of strings custom field.
    CustomFieldContextDefaultValueForgeMultiUserField:
      required:
        - accountIds
        - contextId
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        accountIds:
          type: array
          description: The IDs of the default users.
          items:
            type: string
            description: The IDs of the default users.
      description: Defaults for a Forge collection of users custom field.
    CustomFieldContextDefaultValueForgeNumberField:
      required:
        - number
      type: object
      properties:
        number:
          type: number
          description: The default floating-point number.
          format: double
      description: Default value for a Forge number custom field.
    CustomFieldContextDefaultValueForgeObjectField:
      required:
        - type
      type: object
      properties:
        object:
          type: object
          description: The default JSON object.
        type:
          type: string
      description: The default value for a Forge object custom field.
    CustomFieldContextDefaultValueForgeStringField:
      type: object
      properties:
        text:
          type: string
          description: The default text. The maximum length is 254 characters.
      description: The default text for a Forge string custom field.
    CustomFieldContextDefaultValueForgeUserField:
      required:
        - accountId
        - contextId
        - userFilter
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        accountId:
          type: string
          description: The ID of the default user.
        userFilter:
          $ref: '#/components/schemas/UserFilter'
      description: Defaults for a Forge user custom field.
    CustomFieldContextDefaultValueLabels:
      required:
        - labels
        - type
      type: object
      properties:
        labels:
          type: array
          description: The default labels value.
          items:
            type: string
            description: The default labels value.
        type:
          type: string
      description: Default value for a labels custom field.
    CustomFieldContextDefaultValueMultiUserPicker:
      required:
        - accountIds
        - contextId
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        accountIds:
          type: array
          description: The IDs of the default users.
          items:
            type: string
            description: The IDs of the default users.
        type:
          type: string
      description: The default value for a User Picker (multiple) custom field.
    CustomFieldContextDefaultValueMultipleGroupPicker:
      required:
        - contextId
        - groupIds
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        groupIds:
          uniqueItems: true
          type: array
          description: The IDs of the default groups.
          items:
            type: string
            description: The IDs of the default groups.
        type:
          type: string
      description: The default value for a multiple group picker custom field.
    CustomFieldContextDefaultValueMultipleOption:
      required:
        - contextId
        - optionIds
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        optionIds:
          type: array
          description: The list of IDs of the default options.
          items:
            type: string
            description: The list of IDs of the default options.
        type:
          type: string
      description: The default value for a multi-select custom field.
    CustomFieldContextDefaultValueMultipleVersionPicker:
      required:
        - type
        - versionIds
      type: object
      properties:
        versionIds:
          uniqueItems: true
          type: array
          description: The IDs of the default versions.
          items:
            type: string
            description: The IDs of the default versions.
        versionOrder:
          type: string
          description: The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
        type:
          type: string
      description: The default value for a multiple version picker custom field.
    CustomFieldContextDefaultValueProject:
      required:
        - contextId
        - projectId
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        projectId:
          type: string
          description: The ID of the default project.
        type:
          type: string
      description: The default value for a project custom field.
    CustomFieldContextDefaultValueReadOnly:
      required:
        - type
      type: object
      properties:
        text:
          type: string
          description: The default text. The maximum length is 255 characters.
        type:
          type: string
      description: The default text for a read only custom field.
    CustomFieldContextDefaultValueSingleGroupPicker:
      required:
        - contextId
        - groupId
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        groupId:
          type: string
          description: The ID of the the default group.
        type:
          type: string
      description: The default value for a group picker custom field.
    CustomFieldContextDefaultValueSingleOption:
      required:
        - contextId
        - optionId
        - type
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        optionId:
          type: string
          description: The ID of the default option.
        type:
          type: string
      description: The default value for a single select custom field.
    CustomFieldContextDefaultValueSingleVersionPicker:
      required:
        - type
        - versionId
      type: object
      properties:
        versionId:
          type: string
          description: The ID of the default version.
        versionOrder:
          type: string
          description: The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
        type:
          type: string
      description: The default value for a version picker custom field.
    CustomFieldContextDefaultValueTextArea:
      required:
        - type
      type: object
      properties:
        text:
          type: string
          description: The default text. The maximum length is 32767 characters.
        type:
          type: string
      description: The default text for a text area custom field.
    CustomFieldContextDefaultValueTextField:
      required:
        - type
      type: object
      properties:
        text:
          type: string
          description: The default text. The maximum length is 254 characters.
        type:
          type: string
      description: The default text for a text custom field.
    CustomFieldContextDefaultValueURL:
      required:
        - contextId
        - type
        - url
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        url:
          type: string
          description: The default URL.
        type:
          type: string
      description: The default value for a URL custom field.
    CustomFieldContextSingleUserPickerDefaults:
      required:
        - accountId
        - contextId
        - type
        - userFilter
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        accountId:
          type: string
          description: The ID of the default user.
        userFilter:
          $ref: '#/components/schemas/UserFilter'
        type:
          type: string
      description: Defaults for a User Picker (single) custom field.
    PageBeanCustomFieldContextDefaultValue:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomFieldContextDefaultValue'
      additionalProperties: false
      description: A page of items.
    UserFilter:
      required:
        - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the filter is enabled.
        groups:
          uniqueItems: true
          type: array
          description: User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
          items:
            type: string
            description: User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
        roleIds:
          uniqueItems: true
          type: array
          description: Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
          items:
            type: integer
            description: Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
            format: int64
      description: Filter for a User Picker (single) custom field.
    CreateCustomFieldContext:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the context.
          readOnly: true
        name:
          type: string
          description: The name of the context.
        description:
          type: string
          description: The description of the context.
        projectIds:
          type: array
          description: The list of project IDs associated with the context. If the list is empty, the context is global.
          items:
            type: string
        issueTypeIds:
          type: array
          description: The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
          items:
            type: string
      additionalProperties: false
      description: The details of a created custom field context.
    ProjectIds:
      required:
        - projectIds
      type: object
      properties:
        projectIds:
          type: array
          description: The IDs of projects.
          writeOnly: true
          items:
            type: string
            writeOnly: true
      additionalProperties: false
      description: A list of project IDs.
    CustomFieldContextUpdateDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the custom field context. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the custom field context. The maximum length is 255 characters.
          writeOnly: true
      additionalProperties: false
      description: Details of a custom field context.
    ProjectIssueTypeMapping:
      required:
        - issueTypeId
        - projectId
      type: object
      properties:
        projectId:
          type: string
          description: The ID of the project.
          writeOnly: true
        issueTypeId:
          type: string
          description: The ID of the issue type.
          writeOnly: true
      additionalProperties: false
      description: The project and issue type mapping.
      writeOnly: true
    ProjectIssueTypeMappings:
      required:
        - mappings
      type: object
      properties:
        mappings:
          type: array
          description: The project and issue type mappings.
          writeOnly: true
          items:
            $ref: '#/components/schemas/ProjectIssueTypeMapping'
      additionalProperties: false
      description: The project and issue type mappings.
    ContextForProjectAndIssueType:
      required:
        - contextId
        - issueTypeId
        - projectId
      type: object
      properties:
        projectId:
          type: string
          description: The ID of the project.
        issueTypeId:
          type: string
          description: The ID of the issue type.
        contextId:
          type: string
          description: The ID of the custom field context.
      additionalProperties: false
      description: The project and issue type mapping with a matching custom field context.
    PageBeanContextForProjectAndIssueType:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ContextForProjectAndIssueType'
      additionalProperties: false
      description: A page of items.
    CustomFieldContextDefaultValueUpdate:
      type: object
      properties:
        defaultValues:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldContextDefaultValue'
      additionalProperties: false
      description: Default values to update.
    IssueTypeToContextMapping:
      required:
        - contextId
      type: object
      properties:
        contextId:
          type: string
          description: The ID of the context.
        issueTypeId:
          type: string
          description: The ID of the issue type.
        isAnyIssueType:
          type: boolean
          description: Whether the context is mapped to any issue type.
      additionalProperties: false
      description: Mapping of an issue type to a context.
    PageBeanIssueTypeToContextMapping:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeToContextMapping'
      additionalProperties: false
      description: A page of items.
    CustomFieldValueUpdate:
      required:
        - issueIds
        - value
      type: object
      properties:
        issueIds:
          type: array
          description: The list of issue IDs.
          writeOnly: true
          items:
            type: integer
            format: int64
            writeOnly: true
        value:
          description: |-
            The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:

             *  `string` the value must be a string.
             *  `number` the value must be a number.
             *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
             *  `user` the value must be an object that contains the `accountId` field.
             *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.

            A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
      additionalProperties: false
      description: A list of issue IDs and the value to update a custom field to.
      writeOnly: true
    CustomFieldValueUpdateDetails:
      type: object
      properties:
        updates:
          type: array
          description: The list of custom field update details.
          items:
            $ref: '#/components/schemas/CustomFieldValueUpdate'
      additionalProperties: false
      description: Details of updates for a custom field.
      writeOnly: true
    MultipleCustomFieldValuesUpdate:
      required:
        - customField
        - issueIds
        - value
      type: object
      properties:
        customField:
          type: string
          description: The ID or key of the custom field. For example, `customfield_10010`.
          writeOnly: true
        issueIds:
          type: array
          description: The list of issue IDs.
          writeOnly: true
          items:
            type: integer
            format: int64
            writeOnly: true
        value:
          description: |-
            The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:

             *  `string` the value must be a string.
             *  `number` the value must be a number.
             *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
             *  `user` the value must be an object that contains the `accountId` field.
             *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.

            A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
      additionalProperties: false
      description: A custom field and its new value with a list of issue to update.
      writeOnly: true
    MultipleCustomFieldValuesUpdateDetails:
      type: object
      properties:
        updates:
          type: array
          items:
            $ref: '#/components/schemas/MultipleCustomFieldValuesUpdate'
      additionalProperties: false
      description: List of updates for a custom fields.
      writeOnly: true
    ContextualConfiguration:
      required:
        - fieldContextId
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the configuration.
        fieldContextId:
          type: string
          description: The ID of the field context the configuration is associated with.
          readOnly: true
        configuration:
          description: The field configuration.
        schema:
          description: The field value schema.
      additionalProperties: false
      description: Details of the contextual configuration for a custom field.
    PageBeanContextualConfiguration:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ContextualConfiguration'
      additionalProperties: false
      description: A page of items.
    CustomFieldConfigurations:
      required:
        - configurations
      type: object
      properties:
        configurations:
          maxItems: 1000
          minItems: 1
          uniqueItems: true
          type: array
          description: The list of custom field configuration details.
          items:
            $ref: '#/components/schemas/ContextualConfiguration'
      additionalProperties: false
      description: Details of configurations for a custom field.
      writeOnly: true
    GlobalScopeBean:
      type: object
      properties:
        attributes:
          uniqueItems: true
          type: array
          description: Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
          items:
            type: string
            enum:
              - notSelectable
              - defaultValue
      additionalProperties: false
    IssueFieldOption:
      required:
        - id
        - value
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the option. This is only unique within the select field's set of options.
          format: int64
        value:
          type: string
          description: The option's name, which is displayed in Jira.
        properties:
          type: object
          additionalProperties: {}
          description: The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.
        config:
          $ref: '#/components/schemas/IssueFieldOptionConfiguration'
      additionalProperties: false
      description: Details of the options for a select list issue field.
    IssueFieldOptionConfiguration:
      type: object
      properties:
        scope:
          description: Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
          allOf:
            - $ref: '#/components/schemas/IssueFieldOptionScopeBean'
        attributes:
          uniqueItems: true
          type: array
          description: DEPRECATED
          items:
            type: string
            enum:
              - notSelectable
              - defaultValue
      additionalProperties: false
      description: Details of the projects the option is available in.
    IssueFieldOptionScopeBean:
      type: object
      properties:
        projects:
          uniqueItems: true
          type: array
          description: DEPRECATED
          items:
            type: integer
            format: int64
        projects2:
          uniqueItems: true
          type: array
          description: Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
          items:
            $ref: '#/components/schemas/ProjectScopeBean'
        global:
          description: Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
          allOf:
            - $ref: '#/components/schemas/GlobalScopeBean'
      additionalProperties: false
    PageBeanIssueFieldOption:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueFieldOption'
      additionalProperties: false
      description: A page of items.
    ProjectScopeBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project that the option's behavior applies to.
          format: int64
        attributes:
          uniqueItems: true
          type: array
          description: Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
          items:
            type: string
            enum:
              - notSelectable
              - defaultValue
      additionalProperties: false
    IssueFieldOptionCreateBean:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: The option's name, which is displayed in Jira.
        properties:
          type: object
          additionalProperties: {}
          description: The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
        config:
          $ref: '#/components/schemas/IssueFieldOptionConfiguration'
      additionalProperties: true
    RemoveOptionFromIssuesResult:
      type: object
      properties:
        modifiedIssues:
          type: array
          description: The IDs of the modified issues.
          items:
            type: integer
            format: int64
        unmodifiedIssues:
          type: array
          description: The IDs of the unchanged issues, those issues where errors prevent modification.
          items:
            type: integer
            format: int64
        errors:
          description: A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned.
          allOf:
            - $ref: '#/components/schemas/SimpleErrorCollection'
      additionalProperties: false
    SimpleErrorCollection:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: string
          description: 'The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."'
        errorMessages:
          type: array
          description: The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
          items:
            type: string
        httpStatusCode:
          type: integer
          format: int32
      additionalProperties: false
    TaskProgressBeanRemoveOptionFromIssuesResult:
      required:
        - elapsedRuntime
        - id
        - lastUpdate
        - progress
        - self
        - status
        - submitted
        - submittedBy
      type: object
      properties:
        self:
          type: string
          description: The URL of the task.
          format: uri
        id:
          type: string
          description: The ID of the task.
        description:
          type: string
          description: The description of the task.
        status:
          type: string
          description: The status of the task.
          enum:
            - ENQUEUED
            - RUNNING
            - COMPLETE
            - FAILED
            - CANCEL_REQUESTED
            - CANCELLED
            - DEAD
        message:
          type: string
          description: Information about the progress of the task.
        result:
          description: The result of the task execution.
          allOf:
            - $ref: '#/components/schemas/RemoveOptionFromIssuesResult'
        submittedBy:
          type: integer
          description: The ID of the user who submitted the task.
          format: int64
        progress:
          type: integer
          description: The progress of the task, as a percentage complete.
          format: int64
        elapsedRuntime:
          type: integer
          description: The execution time of the task, in milliseconds.
          format: int64
        submitted:
          type: integer
          description: A timestamp recording when the task was submitted.
          format: int64
        started:
          type: integer
          description: A timestamp recording when the task was started.
          format: int64
        finished:
          type: integer
          description: A timestamp recording when the task was finished.
          format: int64
        lastUpdate:
          type: integer
          description: A timestamp recording when the task progress was last updated.
          format: int64
      additionalProperties: false
      description: Details about a task.
    Field:
      required:
        - id
        - name
        - schema
      type: object
      properties:
        id:
          type: string
          description: The ID of the field.
        name:
          type: string
          description: The name of the field.
        schema:
          $ref: '#/components/schemas/JsonTypeBean'
        description:
          type: string
          description: The description of the field.
        key:
          type: string
          description: The key of the field.
        isLocked:
          type: boolean
          description: Whether the field is locked.
        isUnscreenable:
          type: boolean
          description: Whether the field is shown on screen or not.
        searcherKey:
          type: string
          description: The searcher key of the field. Returned for custom fields.
        screensCount:
          type: integer
          description: Number of screens where the field is used.
          format: int64
        contextsCount:
          type: integer
          description: Number of contexts where the field is used.
          format: int64
        lastUsed:
          $ref: '#/components/schemas/FieldLastUsed'
      additionalProperties: false
      description: Details of a field.
    FieldLastUsed:
      type: object
      properties:
        type:
          type: string
          description: |-
            Last used value type:

             *  *TRACKED*: field is tracked and a last used date is available.
             *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
             *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
          enum:
            - TRACKED
            - NOT_TRACKED
            - NO_INFORMATION
        value:
          type: string
          description: The date when the value of the field last changed.
          format: date-time
      additionalProperties: false
      description: Information about the most recent use of a field.
    PageBeanField:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Field'
      additionalProperties: false
      description: A page of items.
    FieldConfigurationScheme:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the field configuration scheme.
        name:
          type: string
          description: The name of the field configuration scheme.
        description:
          type: string
          description: The description of the field configuration scheme.
      additionalProperties: false
      description: Details of a field configuration scheme.
    PageBeanFieldConfigurationScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationScheme'
      additionalProperties: false
      description: A page of items.
    FieldConfigurationIssueTypeItem:
      required:
        - fieldConfigurationId
        - fieldConfigurationSchemeId
        - issueTypeId
      type: object
      properties:
        fieldConfigurationSchemeId:
          type: string
          description: The ID of the field configuration scheme.
        issueTypeId:
          type: string
          description: The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.
        fieldConfigurationId:
          type: string
          description: The ID of the field configuration.
      additionalProperties: false
      description: The field configuration for an issue type.
    PageBeanFieldConfigurationIssueTypeItem:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationIssueTypeItem'
      additionalProperties: false
      description: A page of items.
    AssociateFieldConfigurationsWithIssueTypesRequest:
      required:
        - mappings
      type: object
      properties:
        mappings:
          uniqueItems: true
          type: array
          description: Field configuration to issue type mappings.
          writeOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationToIssueTypeMapping'
      additionalProperties: false
      description: Details of a field configuration to issue type mappings.
    FieldConfigurationToIssueTypeMapping:
      required:
        - fieldConfigurationId
        - issueTypeId
      type: object
      properties:
        issueTypeId:
          type: string
          description: The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request.
          writeOnly: true
        fieldConfigurationId:
          type: string
          description: The ID of the field configuration.
          writeOnly: true
      additionalProperties: false
      description: The field configuration to issue type mapping.
      writeOnly: true
    FieldConfigurationSchemeProjects:
      required:
        - projectIds
      type: object
      properties:
        fieldConfigurationScheme:
          $ref: '#/components/schemas/FieldConfigurationScheme'
        projectIds:
          type: array
          description: The IDs of projects using the field configuration scheme.
          items:
            type: string
            description: The IDs of projects using the field configuration scheme.
      additionalProperties: false
      description: Project list with assigned field configuration schema.
    PageBeanFieldConfigurationSchemeProjects:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationSchemeProjects'
      additionalProperties: false
      description: A page of items.
    FieldConfigurationSchemeProjectAssociation:
      required:
        - projectId
      type: object
      properties:
        fieldConfigurationSchemeId:
          type: string
          description: The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
          writeOnly: true
        projectId:
          type: string
          description: The ID of the project.
          writeOnly: true
      additionalProperties: false
      description: Associated field configuration scheme and project.
    UpdateFieldConfigurationSchemeDetails:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 255
          type: string
          description: The name of the field configuration scheme. The name must be unique.
          writeOnly: true
        description:
          maxLength: 1024
          type: string
          description: The description of the field configuration scheme.
          writeOnly: true
      additionalProperties: false
      description: The details of the field configuration scheme.
    IssueTypeIdsToRemove:
      required:
        - issueTypeIds
      type: object
      properties:
        issueTypeIds:
          type: array
          description: The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs.
          items:
            type: string
      additionalProperties: false
      description: The list of issue type IDs to be removed from the field configuration scheme.
    FieldConfigurationDetails:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 255
          type: string
          description: The name of the field configuration. Must be unique.
          writeOnly: true
        description:
          maxLength: 255
          type: string
          description: The description of the field configuration.
          writeOnly: true
      additionalProperties: false
      description: Details of a field configuration.
    PageBeanFieldConfigurationDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationDetails'
      additionalProperties: false
      description: A page of items.
    FieldConfigurationItem:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the field within the field configuration.
        description:
          type: string
          description: The description of the field within the field configuration.
        isHidden:
          type: boolean
          description: Whether the field is hidden in the field configuration.
        isRequired:
          type: boolean
          description: Whether the field is required in the field configuration.
        renderer:
          type: string
          description: The renderer type for the field within the field configuration.
      additionalProperties: false
      description: A field within a field configuration.
    PageBeanFieldConfigurationItem:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationItem'
      additionalProperties: false
      description: A page of items.
    FieldConfiguration:
      required:
        - description
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          description: The ID of the field configuration.
          format: int64
        name:
          type: string
          description: The name of the field configuration.
        description:
          type: string
          description: The description of the field configuration.
        isDefault:
          type: boolean
          description: Whether the field configuration is the default.
      additionalProperties: false
      description: Details of a field configuration.
    FieldConfigurationItemsDetails:
      required:
        - fieldConfigurationItems
      type: object
      properties:
        fieldConfigurationItems:
          type: array
          description: Details of fields in a field configuration.
          writeOnly: true
          items:
            $ref: '#/components/schemas/FieldConfigurationItem'
      additionalProperties: false
      description: Details of field configuration items.
    CreateUpdateRoleRequestBean:
      type: object
      properties:
        name:
          type: string
          description: The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role.
        description:
          type: string
          description: A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role.
      additionalProperties: false
    ActorInputBean:
      type: object
      properties:
        user:
          type: array
          description: The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`.
          items:
            type: string
        groupId:
          type: array
          description: The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`.
          items:
            type: string
        group:
          type: array
          description: The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`.
          items:
            type: string
      additionalProperties: false
    ProjectRoleActorsUpdateBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
          format: int64
          readOnly: true
        categorisedActors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: |-
            The actors to add to the project role.

            Add groups using:

             *  `atlassian-group-role-actor` and a list of group names.
             *  `atlassian-group-role-actor-id` and a list of group IDs.

            As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.

            Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
      additionalProperties: false
      xml:
        name: actor
    ActorsMap:
      type: object
      properties:
        user:
          type: array
          description: The user account ID of the user to add.
          items:
            type: string
        group:
          type: array
          description: The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
          items:
            type: string
        groupId:
          type: array
          description: The ID of the group to add. This parameter cannot be used with the `group` parameter.
          items:
            type: string
      additionalProperties: false
    ProjectRoleDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL the project role details.
          format: uri
          readOnly: true
        name:
          type: string
          description: The name of the project role.
        id:
          type: integer
          description: The ID of the project role.
          format: int64
          readOnly: true
        description:
          type: string
          description: The description of the project role.
          readOnly: true
        admin:
          type: boolean
          description: Whether this role is the admin role for the project.
          readOnly: true
        scope:
          description: The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        roleConfigurable:
          type: boolean
          description: Whether the roles are configurable for this project.
          readOnly: true
        translatedName:
          type: string
          description: The translated name of the project role.
        default:
          type: boolean
          description: Whether this role is the default role for the project.
          readOnly: true
      additionalProperties: false
      description: Details about a project role.
    ChangedWorklog:
      type: object
      properties:
        worklogId:
          type: integer
          description: The ID of the worklog.
          format: int64
          readOnly: true
        updatedTime:
          type: integer
          description: The datetime of the change.
          format: int64
          readOnly: true
        properties:
          type: array
          description: Details of properties associated with the change.
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: false
      description: Details of a changed worklog.
    ChangedWorklogs:
      type: object
      properties:
        values:
          type: array
          description: Changed worklog list.
          readOnly: true
          items:
            $ref: '#/components/schemas/ChangedWorklog'
        since:
          type: integer
          description: The datetime of the first worklog item in the list.
          format: int64
          readOnly: true
        until:
          type: integer
          description: The datetime of the last worklog item in the list.
          format: int64
          readOnly: true
        self:
          type: string
          description: The URL of this changed worklogs list.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: The URL of the next list of changed worklogs.
          format: uri
          readOnly: true
        lastPage:
          type: boolean
      additionalProperties: false
      description: List of changed worklogs.
    WorklogIdsRequestBean:
      required:
        - ids
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          description: A list of worklog IDs.
          items:
            type: integer
            format: int64
      additionalProperties: false
    IssueTypeScreenSchemeItem:
      required:
        - issueTypeId
        - issueTypeScreenSchemeId
        - screenSchemeId
      type: object
      properties:
        issueTypeScreenSchemeId:
          type: string
          description: The ID of the issue type screen scheme.
        issueTypeId:
          type: string
          description: The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
        screenSchemeId:
          type: string
          description: The ID of the screen scheme.
      additionalProperties: false
      description: The screen scheme for an issue type.
    PageBeanIssueTypeScreenSchemeItem:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeScreenSchemeItem'
      additionalProperties: false
      description: A page of items.
    IssueTypeScreenScheme:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue type screen scheme.
        name:
          type: string
          description: The name of the issue type screen scheme.
        description:
          type: string
          description: The description of the issue type screen scheme.
      additionalProperties: false
      description: Details of an issue type screen scheme.
    IssueTypeScreenSchemesProjects:
      required:
        - issueTypeScreenScheme
        - projectIds
      type: object
      properties:
        issueTypeScreenScheme:
          description: Details of an issue type screen scheme.
          allOf:
            - $ref: '#/components/schemas/IssueTypeScreenScheme'
        projectIds:
          type: array
          description: The IDs of the projects using the issue type screen scheme.
          items:
            type: string
      additionalProperties: false
      description: Issue type screen scheme with a list of the projects that use it.
    PageBeanIssueTypeScreenSchemesProjects:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeScreenSchemesProjects'
      additionalProperties: false
      description: A page of items.
    PageBeanIssueTypeScreenScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeScreenScheme'
      additionalProperties: false
      description: A page of items.
    PageBeanProjectDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectDetails'
      additionalProperties: false
      description: A page of items.
    IssueTypeScreenSchemeProjectAssociation:
      type: object
      properties:
        issueTypeScreenSchemeId:
          type: string
          description: The ID of the issue type screen scheme.
          writeOnly: true
        projectId:
          type: string
          description: The ID of the project.
          writeOnly: true
      additionalProperties: false
      description: Associated issue type screen scheme and project.
    IssueTypeScreenSchemeDetails:
      required:
        - issueTypeMappings
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the issue type screen scheme. The maximum length is 255 characters.
          writeOnly: true
        issueTypeMappings:
          type: array
          description: The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
          writeOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeScreenSchemeMapping'
      additionalProperties: false
      description: The details of an issue type screen scheme.
    IssueTypeScreenSchemeMapping:
      required:
        - issueTypeId
        - screenSchemeId
      type: object
      properties:
        issueTypeId:
          type: string
          description: The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme.
          writeOnly: true
        screenSchemeId:
          type: string
          description: The ID of the screen scheme. Only screen schemes used in classic projects are accepted.
          writeOnly: true
      additionalProperties: false
      description: The IDs of the screen schemes for the issue type IDs.
      writeOnly: true
    IssueTypeScreenSchemeId:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue type screen scheme.
          readOnly: true
      additionalProperties: false
      description: The ID of an issue type screen scheme.
    IssueTypeScreenSchemeUpdateDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the issue type screen scheme. The maximum length is 255 characters.
          writeOnly: true
      additionalProperties: false
      description: Details of an issue type screen scheme.
    IssueTypeScreenSchemeMappingDetails:
      required:
        - issueTypeMappings
      type: object
      properties:
        issueTypeMappings:
          type: array
          description: The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created.
          writeOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeScreenSchemeMapping'
      additionalProperties: false
      description: A list of issue type screen scheme mappings.
    UpdateDefaultScreenScheme:
      required:
        - screenSchemeId
      type: object
      properties:
        screenSchemeId:
          type: string
          description: The ID of the screen scheme.
          writeOnly: true
      additionalProperties: false
      description: The ID of a screen scheme.
    AttachmentMetadata:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the attachment.
          format: int64
          readOnly: true
        self:
          type: string
          description: The URL of the attachment metadata details.
          format: uri
          readOnly: true
        filename:
          type: string
          description: The name of the attachment file.
          readOnly: true
        author:
          description: Details of the user who attached the file.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        created:
          type: string
          description: The datetime the attachment was created.
          format: date-time
          readOnly: true
        size:
          type: integer
          description: The size of the attachment.
          format: int64
          readOnly: true
        mimeType:
          type: string
          description: The MIME type of the attachment.
          readOnly: true
        properties:
          type: object
          additionalProperties:
            readOnly: true
          description: Additional properties of the attachment.
          readOnly: true
        content:
          type: string
          description: The URL of the attachment.
          readOnly: true
        thumbnail:
          type: string
          description: The URL of a thumbnail representing the attachment.
          readOnly: true
      additionalProperties: false
      description: Metadata for an issue attachment.
      xml:
        name: attachment
    AttachmentSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the ability to add attachments is enabled.
          readOnly: true
        uploadLimit:
          type: integer
          description: The maximum size of attachments permitted, in bytes.
          format: int64
          readOnly: true
      additionalProperties: false
      description: Details of the instance's attachment settings.
    AttachmentArchiveEntry:
      type: object
      properties:
        name:
          type: string
        size:
          type: integer
          format: int64
        entryIndex:
          type: integer
          format: int64
        abbreviatedName:
          type: string
        mediaType:
          type: string
      additionalProperties: false
    AttachmentArchiveImpl:
      type: object
      properties:
        entries:
          type: array
          description: The list of the items included in the archive.
          items:
            $ref: '#/components/schemas/AttachmentArchiveEntry'
        totalEntryCount:
          type: integer
          description: The number of items in the archive.
          format: int32
      additionalProperties: false
    AttachmentArchive:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentArchiveEntry'
        moreAvailable:
          type: boolean
        totalNumberOfEntriesAvailable:
          type: integer
          format: int32
        totalEntryCount:
          type: integer
          format: int32
      additionalProperties: false
    AttachmentArchiveItemReadable:
      type: object
      properties:
        path:
          type: string
          description: The path of the archive item.
          readOnly: true
        index:
          type: integer
          description: The position of the item within the archive.
          format: int64
          readOnly: true
        size:
          type: string
          description: The size of the archive item.
          readOnly: true
        mediaType:
          type: string
          description: The MIME type of the archive item.
          readOnly: true
        label:
          type: string
          description: The label for the archive item.
          readOnly: true
      additionalProperties: false
      description: Metadata for an item in an attachment archive.
    AttachmentArchiveMetadataReadable:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the attachment.
          format: int64
          readOnly: true
        name:
          type: string
          description: The name of the archive file.
          readOnly: true
        entries:
          type: array
          description: The list of the items included in the archive.
          readOnly: true
          items:
            $ref: '#/components/schemas/AttachmentArchiveItemReadable'
        totalEntryCount:
          type: integer
          description: The number of items included in the archive.
          format: int64
          readOnly: true
        mediaType:
          type: string
          description: The MIME type of the attachment.
          readOnly: true
      additionalProperties: false
      description: Metadata for an archive (for example a zip) and its contents.
    PageBeanScreenScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ScreenScheme'
      additionalProperties: false
      description: A page of items.
    ScreenScheme:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen scheme.
          format: int64
        name:
          type: string
          description: The name of the screen scheme.
        description:
          type: string
          description: The description of the screen scheme.
        screens:
          description: The IDs of the screens for the screen types of the screen scheme.
          allOf:
            - $ref: '#/components/schemas/ScreenTypes'
        issueTypeScreenSchemes:
          description: Details of the issue type screen schemes associated with the screen scheme.
          allOf:
            - $ref: '#/components/schemas/PageBeanIssueTypeScreenScheme'
      additionalProperties: false
      description: A screen scheme.
    ScreenTypes:
      required:
        - defaultScreen
      type: object
      properties:
        edit:
          type: integer
          description: The ID of the edit screen.
          format: int64
        create:
          type: integer
          description: The ID of the create screen.
          format: int64
        view:
          type: integer
          description: The ID of the view screen.
          format: int64
        default:
          type: integer
          description: The ID of the default screen. Required when creating a screen scheme.
          format: int64
      additionalProperties: false
      description: The IDs of the screens for the screen types of the screen scheme.
      writeOnly: true
    ScreenSchemeDetails:
      required:
        - name
        - screens
      type: object
      properties:
        name:
          type: string
          description: The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the screen scheme. The maximum length is 255 characters.
          writeOnly: true
        screens:
          description: The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
          allOf:
            - $ref: '#/components/schemas/ScreenTypes'
      additionalProperties: false
      description: Details of a screen scheme.
    ScreenSchemeId:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen scheme.
          format: int64
          readOnly: true
      additionalProperties: false
      description: The ID of a screen scheme.
    UpdateScreenSchemeDetails:
      type: object
      properties:
        name:
          type: string
          description: The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
          writeOnly: true
        description:
          type: string
          description: The description of the screen scheme. The maximum length is 255 characters.
          writeOnly: true
        screens:
          description: The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
          allOf:
            - $ref: '#/components/schemas/UpdateScreenTypes'
      additionalProperties: false
      description: Details of a screen scheme.
    UpdateScreenTypes:
      type: object
      properties:
        edit:
          type: string
          description: The ID of the edit screen. To remove the screen association, pass a null.
          writeOnly: true
        create:
          type: string
          description: The ID of the create screen. To remove the screen association, pass a null.
          writeOnly: true
        view:
          type: string
          description: The ID of the view screen. To remove the screen association, pass a null.
          writeOnly: true
        default:
          type: string
          description: The ID of the default screen. When specified, must include a screen ID as a default screen is required.
          writeOnly: true
      additionalProperties: false
      description: The IDs of the screens for the screen types of the screen scheme.
      writeOnly: true
    PageBeanUserKey:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserKey'
      additionalProperties: false
      description: A page of items.
    UserKey:
      type: object
      properties:
        key:
          type: string
          description: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
      additionalProperties: false
      description: List of user account IDs.
    SearchResults:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional search result details in the response.
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        issues:
          type: array
          description: The list of issues found by the search.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueBean'
        warningMessages:
          type: array
          description: Any warnings related to the JQL query.
          readOnly: true
          items:
            type: string
            readOnly: true
        names:
          type: object
          additionalProperties:
            type: string
            readOnly: true
          description: The ID and name of each field in the search results.
          readOnly: true
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonTypeBean'
          description: The schema describing the field types in the search results.
          readOnly: true
      additionalProperties: false
      description: The result of a JQL search.
    SearchRequestBean:
      type: object
      properties:
        jql:
          type: string
          description: A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.
        startAt:
          type: integer
          description: The index of the first item to return in the page of results (page offset). The base index is `0`.
          format: int32
        maxResults:
          type: integer
          description: The maximum number of items to return per page.
          format: int32
          default: 50
        fields:
          type: array
          description: |-
            A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            The default is `*navigable`.

            Examples:

             *  `summary,comment` Returns the summary and comments fields only.
             *  `-description` Returns all navigable (default) fields except description.
             *  `*all,-comment` Returns all fields except comments.

            Multiple `fields` parameters can be included in a request.

            Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
          items:
            type: string
        validateQuery:
          type: string
          description: |-
            Determines how to validate the JQL query and treat the validation results. Supported values:

             *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
             *  `warn` Returns all errors as warnings.
             *  `none` No validation is performed.
             *  `true` *Deprecated* A legacy synonym for `strict`.
             *  `false` *Deprecated* A legacy synonym for `warn`.

            The default is `strict`.

            Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
          enum:
            - strict
            - warn
            - none
            - 'true'
            - 'false'
        expand:
          type: array
          description: |-
            Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `operations` Returns all possible operations for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
          items:
            type: string
        properties:
          type: array
          description: A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
          items:
            type: string
        fieldsByKeys:
          type: boolean
          description: Reference fields by their key (rather than ID). The default is `false`.
      additionalProperties: false
    FieldReferenceData:
      type: object
      properties:
        value:
          type: string
          description: The field identifier.
        displayName:
          type: string
          description: |-
            The display name contains the following:

             *  for system fields, the field name. For example, `Summary`.
             *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
             *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
        orderable:
          type: string
          description: Whether the field can be used in a query's `ORDER BY` clause.
          enum:
            - 'true'
            - 'false'
        searchable:
          type: string
          description: Whether the content of this field can be searched.
          enum:
            - 'true'
            - 'false'
        auto:
          type: string
          description: Whether the field provide auto-complete suggestions.
          enum:
            - 'true'
            - 'false'
        cfid:
          type: string
          description: If the item is a custom field, the ID of the custom field.
        operators:
          type: array
          description: The valid search operators for the field.
          items:
            type: string
        types:
          type: array
          description: The data types of items in the field.
          items:
            type: string
      additionalProperties: false
      description: Details of a field that can be used in advanced searches.
    FunctionReferenceData:
      type: object
      properties:
        value:
          type: string
          description: The function identifier.
        displayName:
          type: string
          description: The display name of the function.
        isList:
          type: string
          description: Whether the function can take a list of arguments.
          enum:
            - 'true'
            - 'false'
        types:
          type: array
          description: The data types returned by the function.
          items:
            type: string
      additionalProperties: false
      description: Details of functions that can be used in advanced searches.
    JQLReferenceData:
      type: object
      properties:
        visibleFieldNames:
          type: array
          description: List of fields usable in JQL queries.
          items:
            $ref: '#/components/schemas/FieldReferenceData'
        visibleFunctionNames:
          type: array
          description: List of functions usable in JQL queries.
          items:
            $ref: '#/components/schemas/FunctionReferenceData'
        jqlReservedWords:
          type: array
          description: List of JQL query reserved words.
          items:
            type: string
      additionalProperties: false
      description: Lists of JQL reference data.
    SearchAutoCompleteFilter:
      type: object
      properties:
        projectIds:
          type: array
          description: List of project IDs used to filter the visible field details returned.
          items:
            type: integer
            format: int64
        includeCollapsedFields:
          type: boolean
          description: Include collapsed fields for fields that have non-unique names.
          default: false
      additionalProperties: false
      description: Details of how to filter and list search auto complete information.
    AutoCompleteSuggestion:
      type: object
      properties:
        value:
          type: string
          description: The value of a suggested item.
        displayName:
          type: string
          description: The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag.
      additionalProperties: false
      description: A field auto-complete suggestion.
    AutoCompleteSuggestions:
      type: object
      properties:
        results:
          type: array
          description: The list of suggested item.
          items:
            $ref: '#/components/schemas/AutoCompleteSuggestion'
      additionalProperties: false
      description: The results from a JQL query.
    JQLPersonalDataMigrationRequest:
      type: object
      properties:
        queryStrings:
          type: array
          description: A list of queries with user identifiers. Maximum of 100 queries.
          items:
            type: string
      additionalProperties: false
      description: The JQL queries to be converted.
    ConvertedJQLQueries:
      type: object
      properties:
        queryStrings:
          type: array
          description: The list of converted query strings with account IDs in place of user identifiers.
          items:
            type: string
        queriesWithUnknownUsers:
          type: array
          description: List of queries containing user information that could not be mapped to an existing user
          items:
            $ref: '#/components/schemas/JQLQueryWithUnknownUsers'
      additionalProperties: false
      description: The converted JQL queries.
    JQLQueryWithUnknownUsers:
      type: object
      properties:
        originalQuery:
          type: string
          description: The original query, for reference
        convertedQuery:
          type: string
          description: The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found
      additionalProperties: false
      description: JQL queries that contained users that could not be found
    Filter:
      required:
        - name
      type: object
      properties:
        self:
          type: string
          description: The URL of the filter.
          format: uri
          readOnly: true
        id:
          type: string
          description: The unique identifier for the filter.
          readOnly: true
        name:
          type: string
          description: The name of the filter. Must be unique.
        description:
          type: string
          description: A description of the filter.
        owner:
          description: The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        jql:
          type: string
          description: The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
        viewUrl:
          type: string
          description: A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
          format: uri
          readOnly: true
        searchUrl:
          type: string
          description: A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
          format: uri
          readOnly: true
        favourite:
          type: boolean
          description: Whether the filter is selected as a favorite.
        favouritedCount:
          type: integer
          description: The count of how many users have selected this filter as a favorite, including the filter owner.
          format: int64
          readOnly: true
        sharePermissions:
          type: array
          description: The groups and projects that the filter is shared with.
          items:
            $ref: '#/components/schemas/SharePermission'
        editPermissions:
          type: array
          description: The groups and projects that can edit the filter.
          items:
            $ref: '#/components/schemas/SharePermission'
        sharedUsers:
          description: A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserList'
        subscriptions:
          description: A paginated list of the users that are subscribed to the filter.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/FilterSubscriptionsList'
      additionalProperties: false
      description: Details about a filter.
      xml:
        name: filter
    FilterSubscription:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the filter subscription.
          format: int64
          readOnly: true
        user:
          description: The user subscribing to filter.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        group:
          description: The group subscribing to filter.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/GroupName'
      additionalProperties: false
      description: Details of a user or group subscribing to a filter.
    FilterSubscriptionsList:
      type: object
      properties:
        size:
          type: integer
          description: The number of items on the page.
          format: int32
          readOnly: true
          xml:
            attribute: true
        items:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FilterSubscription'
        max-results:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
          xml:
            name: max-results
            attribute: true
        start-index:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: start-index
            attribute: true
        end-index:
          type: integer
          description: The index of the last item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: end-index
            attribute: true
      additionalProperties: false
      description: A paginated list of subscriptions to a filter.
    UserList:
      type: object
      properties:
        size:
          type: integer
          description: The number of items on the page.
          format: int32
          readOnly: true
          xml:
            attribute: true
        items:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
        max-results:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
          xml:
            name: max-results
            attribute: true
        start-index:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: start-index
            attribute: true
        end-index:
          type: integer
          description: The index of the last item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: end-index
            attribute: true
      additionalProperties: false
      description: A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.
    FilterDetails:
      required:
        - name
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional filter details in the response.
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the filter.
          format: uri
          readOnly: true
        id:
          type: string
          description: The unique identifier for the filter.
          readOnly: true
        name:
          type: string
          description: The name of the filter.
        description:
          type: string
          description: The description of the filter.
        owner:
          description: The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        jql:
          type: string
          description: The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
          readOnly: true
        viewUrl:
          type: string
          description: A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
          format: uri
          readOnly: true
        searchUrl:
          type: string
          description: A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
          format: uri
          readOnly: true
        favourite:
          type: boolean
          description: Whether the filter is selected as a favorite by any users, not including the filter owner.
          readOnly: true
        favouritedCount:
          type: integer
          description: The count of how many users have selected this filter as a favorite, including the filter owner.
          format: int64
          readOnly: true
        sharePermissions:
          type: array
          description: The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
          items:
            $ref: '#/components/schemas/SharePermission'
        editPermissions:
          type: array
          description: The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
          items:
            $ref: '#/components/schemas/SharePermission'
        subscriptions:
          type: array
          description: The users that are subscribed to the filter.
          readOnly: true
          items:
            $ref: '#/components/schemas/FilterSubscription'
      additionalProperties: false
      description: Details of a filter.
    PageBeanFilterDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FilterDetails'
      additionalProperties: false
      description: A page of items.
    ChangeFilterOwner:
      required:
        - accountId
      type: object
      properties:
        accountId:
          type: string
          description: The account ID of the new owner.
      additionalProperties: false
      description: The account ID of the new owner.
      writeOnly: true
    DefaultShareScope:
      required:
        - scope
      type: object
      properties:
        scope:
          type: string
          description: |-
            The scope of the default sharing for new filters and dashboards:

             *  `AUTHENTICATED` Shared with all logged-in users.
             *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
             *  `PRIVATE` Not shared with any users.
          enum:
            - GLOBAL
            - AUTHENTICATED
            - PRIVATE
      additionalProperties: false
      description: Details of the scope of the default sharing for new filters and dashboards.
      xml:
        name: defaultShareScope
    SharePermissionInputBean:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: |-
            The type of the share permission.Specify the type as follows:

             *  `user` Share with a user.
             *  `group` Share with a group. Specify `groupname` as well.
             *  `project` Share with a project. Specify `projectId` as well.
             *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
             *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
             *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
          enum:
            - user
            - project
            - group
            - projectRole
            - global
            - authenticated
        projectId:
          type: string
          description: The ID of the project to share the filter with. Set `type` to `project`.
        groupname:
          type: string
          description: The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
        projectRoleId:
          type: string
          description: The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
        accountId:
          type: string
          description: The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
        rights:
          type: integer
          description: The rights for the share permission.
          format: int32
        groupId:
          type: string
          description: The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
      additionalProperties: false
    JqlQueriesToSanitize:
      required:
        - queries
      type: object
      properties:
        queries:
          type: array
          description: The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries.
          items:
            $ref: '#/components/schemas/JqlQueryToSanitize'
      additionalProperties: false
      description: The list of JQL queries to sanitize for the given account IDs.
      writeOnly: true
    JqlQueryToSanitize:
      required:
        - query
      type: object
      properties:
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          nullable: true
        query:
          type: string
          description: The query to sanitize.
      additionalProperties: false
      description: The JQL query to sanitize for the account ID. If the account ID is null, sanitizing is performed for an anonymous user.
      writeOnly: true
    SanitizedJqlQueries:
      type: object
      properties:
        queries:
          type: array
          description: The list of sanitized JQL queries.
          items:
            $ref: '#/components/schemas/SanitizedJqlQuery'
      additionalProperties: false
      description: The sanitized JQL queries for the given account IDs.
    SanitizedJqlQuery:
      type: object
      properties:
        initialQuery:
          type: string
          description: The initial query.
        sanitizedQuery:
          type: string
          description: The sanitized query, if there were no errors.
          nullable: true
        errors:
          description: The list of errors.
          allOf:
            - $ref: '#/components/schemas/ErrorCollection'
        accountId:
          maxLength: 128
          type: string
          description: The account ID of the user for whom sanitization was performed.
          nullable: true
      additionalProperties: false
      description: Details of the sanitized JQL query.
    JqlQueriesToParse:
      required:
        - queries
      type: object
      properties:
        queries:
          minLength: 1
          type: array
          description: A list of queries to parse.
          items:
            minLength: 1
            type: string
      additionalProperties: false
      description: A list of JQL queries to parse.
      writeOnly: true
    CompoundClause:
      required:
        - clauses
        - operator
      type: object
      properties:
        clauses:
          type: array
          description: The list of nested clauses.
          items:
            $ref: '#/components/schemas/JqlQueryClause'
        operator:
          type: string
          description: The operator between the clauses.
          enum:
            - and
            - or
            - not
      description: A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.`
    FieldChangedClause:
      required:
        - field
        - operator
        - predicates
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        operator:
          type: string
          description: The operator applied to the field.
          enum:
            - changed
        predicates:
          type: array
          description: The list of time predicates.
          items:
            $ref: '#/components/schemas/JqlQueryClauseTimePredicate'
      description: A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator.
    FieldValueClause:
      required:
        - field
        - operand
        - operator
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        operator:
          type: string
          description: The operator between the field and operand.
          enum:
            - '='
            - '!='
            - '>'
            - <
            - '>='
            - <=
            - in
            - not in
            - '~'
            - ~=
            - is
            - is not
        operand:
          $ref: '#/components/schemas/JqlQueryClauseOperand'
      description: A clause that asserts the current value of a field. For example, `summary ~ test`.
    FieldWasClause:
      required:
        - field
        - operand
        - operator
        - predicates
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        operator:
          type: string
          description: The operator between the field and operand.
          enum:
            - was
            - was in
            - was not in
            - was not
        operand:
          $ref: '#/components/schemas/JqlQueryClauseOperand'
        predicates:
          type: array
          description: The list of time predicates.
          items:
            $ref: '#/components/schemas/JqlQueryClauseTimePredicate'
      description: A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
    FunctionOperand:
      required:
        - arguments
        - function
      type: object
      properties:
        function:
          type: string
          description: The name of the function.
        arguments:
          type: array
          description: The list of function arguments.
          items:
            type: string
      description: An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
    JqlQuery:
      type: object
      properties:
        where:
          $ref: '#/components/schemas/JqlQueryClause'
        orderBy:
          $ref: '#/components/schemas/JqlQueryOrderByClause'
      additionalProperties: false
      description: A parsed JQL query.
    JqlQueryClause:
      type: object
      additionalProperties: false
      description: A JQL query clause.
      anyOf:
        - $ref: '#/components/schemas/CompoundClause'
        - $ref: '#/components/schemas/FieldValueClause'
        - $ref: '#/components/schemas/FieldWasClause'
        - $ref: '#/components/schemas/FieldChangedClause'
    JqlQueryClauseOperand:
      type: object
      description: Details of an operand in a JQL clause.
      anyOf:
        - $ref: '#/components/schemas/ListOperand'
        - $ref: '#/components/schemas/ValueOperand'
        - $ref: '#/components/schemas/FunctionOperand'
        - $ref: '#/components/schemas/KeywordOperand'
    JqlQueryClauseTimePredicate:
      required:
        - operand
        - operator
      type: object
      properties:
        operator:
          type: string
          description: The operator between the field and the operand.
          enum:
            - before
            - after
            - from
            - to
            - 'on'
            - during
            - by
        operand:
          $ref: '#/components/schemas/JqlQueryClauseOperand'
      description: A time predicate for a temporal JQL clause.
    JqlQueryField:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the field.
        property:
          type: array
          description: When the field refers to a value in an entity property, details of the entity property value.
          items:
            $ref: '#/components/schemas/JqlQueryFieldEntityProperty'
      additionalProperties: false
      description: A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
    JqlQueryFieldEntityProperty:
      required:
        - entity
        - key
        - path
      type: object
      properties:
        entity:
          type: string
          description: The object on which the property is set.
          example: issue
        key:
          type: string
          description: The key of the property.
          example: stats
        path:
          type: string
          description: The path in the property value to query.
          example: comments.count
        type:
          type: string
          description: The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
          example: number
          enum:
            - number
            - string
            - text
            - date
            - user
      description: Details of an entity property.
    JqlQueryOrderByClause:
      required:
        - fields
      type: object
      properties:
        fields:
          type: array
          description: The list of order-by clause fields and their ordering directives.
          items:
            $ref: '#/components/schemas/JqlQueryOrderByClauseElement'
      additionalProperties: false
      description: Details of the order-by JQL clause.
    JqlQueryOrderByClauseElement:
      required:
        - field
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        direction:
          type: string
          description: The direction in which to order the results.
          enum:
            - asc
            - desc
      additionalProperties: false
      description: An element of the order-by JQL clause.
    JqlQueryUnitaryOperand:
      type: object
      description: An operand that can be part of a list operand.
      anyOf:
        - $ref: '#/components/schemas/ValueOperand'
        - $ref: '#/components/schemas/FunctionOperand'
        - $ref: '#/components/schemas/KeywordOperand'
    KeywordOperand:
      required:
        - keyword
      type: object
      properties:
        keyword:
          type: string
          description: The keyword that is the operand value.
          enum:
            - empty
      description: An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
    ListOperand:
      required:
        - values
      type: object
      properties:
        values:
          minLength: 1
          type: array
          description: The list of operand values.
          items:
            $ref: '#/components/schemas/JqlQueryUnitaryOperand'
      description: An operand that is a list of values.
    ParsedJqlQueries:
      required:
        - queries
      type: object
      properties:
        queries:
          minLength: 1
          type: array
          description: A list of parsed JQL queries.
          items:
            $ref: '#/components/schemas/ParsedJqlQuery'
      additionalProperties: false
      description: A list of parsed JQL queries.
    ParsedJqlQuery:
      minLength: 1
      required:
        - query
      type: object
      properties:
        query:
          type: string
          description: The JQL query that was parsed and validated.
        structure:
          description: The syntax tree of the query. Empty if the query was invalid.
          allOf:
            - $ref: '#/components/schemas/JqlQuery'
        errors:
          uniqueItems: true
          type: array
          description: The list of syntax or validation errors.
          items:
            type: string
      additionalProperties: false
      description: Details of a parsed JQL query.
    ValueOperand:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: The operand value.
      description: An operand that is a user-provided value.
    EventNotification:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional event notification details in the response.
        id:
          type: integer
          description: The ID of the notification.
          format: int64
        notificationType:
          type: string
          description: Identifies the recipients of the notification.
          enum:
            - CurrentAssignee
            - Reporter
            - CurrentUser
            - ProjectLead
            - ComponentLead
            - User
            - Group
            - ProjectRole
            - EmailAddress
            - AllWatchers
            - UserCustomField
            - GroupCustomField
        parameter:
          type: string
          description: |-
            As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:

             *  `User` The `parameter` is the user account ID.
             *  `Group` The `parameter` is the group name.
             *  `ProjectRole` The `parameter` is the project role ID.
             *  `UserCustomField` The `parameter` is the ID of the custom field.
             *  `GroupCustomField` The `parameter` is the ID of the custom field.
        recipient:
          type: string
          description: |-
            The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:

             *  `User`, `recipient` is the user account ID.
             *  `Group`, `recipient` is the group ID.
             *  `ProjectRole`, `recipient` is the project role ID.
             *  `UserCustomField`, `recipient` is the ID of the custom field.
             *  `GroupCustomField`, `recipient` is the ID of the custom field.
        group:
          description: The specified group.
          allOf:
            - $ref: '#/components/schemas/GroupName'
        field:
          description: The custom user or group field.
          allOf:
            - $ref: '#/components/schemas/FieldDetails'
        emailAddress:
          type: string
          description: The email address.
        projectRole:
          description: The specified project role.
          allOf:
            - $ref: '#/components/schemas/ProjectRole'
        user:
          description: The specified user.
          allOf:
            - $ref: '#/components/schemas/UserDetails'
      additionalProperties: false
      description: Details about a notification associated with an event.
    NotificationEvent:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
          format: int64
        name:
          type: string
          description: The name of the event.
        description:
          type: string
          description: The description of the event.
        templateEvent:
          description: The template of the event. Only custom events configured by Jira administrators have template.
          allOf:
            - $ref: '#/components/schemas/NotificationEvent'
      additionalProperties: false
      description: Details about a notification event.
    NotificationScheme:
      type: object
      properties:
        expand:
          type: string
          description: Expand options that include additional notification scheme details in the response.
        id:
          type: integer
          description: The ID of the notification scheme.
          format: int64
        self:
          type: string
        name:
          type: string
          description: The name of the notification scheme.
        description:
          type: string
          description: The description of the notification scheme.
        notificationSchemeEvents:
          type: array
          description: The notification events and associated recipients.
          items:
            $ref: '#/components/schemas/NotificationSchemeEvent'
        scope:
          description: The scope of the notification scheme.
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: Details about a notification scheme.
    NotificationSchemeEvent:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/NotificationEvent'
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/EventNotification'
      additionalProperties: false
      description: Details about a notification scheme event.
    PageBeanNotificationScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: If there is another page of results, the URL of the next page.
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          format: int64
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          format: int64
          readOnly: true
        isLast:
          type: boolean
          description: Whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/NotificationScheme'
      additionalProperties: false
      description: A page of items.
    OperationMessage:
      required:
        - message
        - statusCode
      type: object
      properties:
        message:
          type: string
          description: The human-readable message that describes the result.
        statusCode:
          type: integer
          description: The status code of the response.
      additionalProperties: false
      example:
        message: An example message.
        statusCode: 200
    ErrorMessage:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: The error message.
      additionalProperties: false
      example:
        message: The request is not from a Connect app.
    ConnectModules:
      required:
        - modules
      type: object
      properties:
        modules:
          type: array
          description: |-
            A list of app modules in the same format as the `modules` property in the
            [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
          items:
            $ref: '#/components/schemas/ConnectModule'
      example:
        jiraEntityProperties:
          - keyConfigurations:
              - extractions:
                  - objectName: extension
                    type: text
                    alias: attachmentExtension
                propertyKey: attachment
            entityType: issue
            name:
              value: Attachment Index Document
            key: dynamic-attachment-entity-property
        jiraIssueFields:
          - description:
              value: A dynamically added single-select field
            type: single_select
            extractions:
              - path: category
                type: text
                name: categoryName
            name:
              value: Dynamic single select
            key: dynamic-select-field
    ConnectModule:
      type: object
      description: |-
        A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
        [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
      example:
        description:
          value: field with team
        type: single_select
        extractions:
          - path: category
            type: text
            name: categoryName
        name:
          value: Team
        key: team-field
    WorkflowRulesSearch:
      required:
        - ruleIds
        - workflowEntityId
      type: object
      properties:
        workflowEntityId:
          type: string
          description: The workflow ID.
          format: uuid
          example: a498d711-685d-428d-8c3e-bc03bb450ea7
        ruleIds:
          maxItems: 10
          minItems: 1
          type: array
          description: The list of workflow rule IDs.
          items:
            type: string
            description: Workflow rule ID.
            format: uuid
            example: 55d44f1d-c859-42e5-9c27-2c5ec3f340b1
        expand:
          type: string
          description: Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
          example: transition
      description: Details of the workflow and its transition rules.
    WorkflowRulesSearchDetails:
      type: object
      properties:
        workflowEntityId:
          type: string
          description: The workflow ID.
          format: uuid
          example: a498d711-685d-428d-8c3e-bc03bb450ea7
        invalidRules:
          type: array
          description: List of workflow rule IDs that do not belong to the workflow or can not be found.
          items:
            type: string
            description: Workflow rule ID.
            format: uuid
            example: 55d44f1d-c859-42e5-9c27-2c5ec3f340b1
        validRules:
          type: array
          description: List of valid workflow transition rules.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRules'
      description: Details of workflow transition rules.
    EntityPropertyDetails:
      required:
        - entityId
        - key
        - value
      type: object
      properties:
        entityId:
          type: number
          description: The entity property ID.
          example: 123
        key:
          type: string
          description: The entity property key.
          example: mykey
        value:
          type: string
          description: The new value of the entity property.
          example: newValue
    ConnectCustomFieldValue:
      required:
        - _type
        - fieldID
        - issueID
      type: object
      properties:
        _type:
          type: string
          description: The type of custom field.
          writeOnly: true
          enum:
            - StringIssueField
            - NumberIssueField
            - RichTextIssueField
            - SingleSelectIssueField
            - MultiSelectIssueField
            - TextIssueField
        issueID:
          type: integer
          description: The issue ID.
          writeOnly: true
        fieldID:
          type: integer
          description: The custom field ID.
          writeOnly: true
        string:
          type: string
          description: The value of string type custom field when `_type` is `StringIssueField`.
        number:
          type: number
          description: The value of number type custom field when `_type` is `NumberIssueField`.
        richText:
          type: string
          description: The value of richText type custom field when `_type` is `RichTextIssueField`.
        optionID:
          type: string
          description: The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
        text:
          type: string
          description: The value of of text custom field type when `_type` is `TextIssueField`.
      description: A list of custom field details.
      writeOnly: true
    ConnectCustomFieldValues:
      type: object
      properties:
        updateValueList:
          type: array
          description: The list of custom field update details.
          items:
            $ref: '#/components/schemas/ConnectCustomFieldValue'
      additionalProperties: false
      description: Details of updates for a custom field.
      writeOnly: true
  securitySchemes:
    basicAuth:
      type: http
      description: You can access this resource via basic auth.
      scheme: basic
    OAuth2:
      type: oauth2
      description: OAuth2 scopes for Jira
      flows:
        authorizationCode:
          authorizationUrl: https://auth.atlassian.com/authorize
          tokenUrl: https://auth.atlassian.com/oauth/token
          scopes:
            read:jira-user: View user information in Jira that you have access to, including usernames, email addresses, and avatars.
            read:jira-work: Read project and issue data. Search for issues and objects associated with issues (such as attachments and worklogs).
            write:jira-work: Create and edit issues in Jira, post comments, create worklogs, and delete issues.
            manage:jira-project: Create and edit project settings and create new project-level objects, for example, versions, components.
            manage:jira-configuration: Configure Jira settings that require the Jira administrators permission, for example, create projects and custom fields, view workflows, manage issue link types.
            manage:jira-webhook: Manage Jira webhooks. Enables an OAuth app to register and unregister dynamic webhooks in Jira. It also provides for fetching of registered webhooks.
            read:application-role:jira: View application roles.
            read:audit-log:jira: View audit logs.
            read:avatar:jira: View system and custom avatars.
            write:avatar:jira: Create and update system and custom avatars.
            delete:avatar:jira: Delete system and custom avatars.
            read:project.avatar:jira: Read project avatars.
            write:project.avatar:jira: Create and update project avatars.
            delete:project.avatar:jira: Delete project avatars.
            read:dashboard:jira: View dashboards.
            write:dashboard:jira: Create and update dashboards.
            delete:dashboard:jira: Delete dashboards.
            read:dashboard.property:jira: View dashboard properties.
            write:dashboard.property:jira: Create and update dashboard properties.
            delete:dashboard.property:jira: Delete dashboard properties.
            read:filter:jira: View filters.
            write:filter:jira: Create and update filters.
            delete:filter:jira: Delete filters.
            read:filter.column:jira: View filter columns.
            write:filter.column:jira: Create and update filter columns.
            delete:filter.column:jira: Delete filter columns.
            read:filter.default-share-scope:jira: View filter default share scopes.
            write:filter.default-share-scope:jira: Create and update filter default share scopes.
            read:group:jira: View user groups.
            write:group:jira: Create and update user groups.
            delete:group:jira: Delete user groups.
            read:license:jira: View licenses.
            read:issue:jira: View issues.
            write:issue:jira: Create and update issues.
            delete:issue:jira: Delete issues.
            read:issue-meta:jira: View issue meta.
            send:notification:jira: Send notifications.
            read:attachment:jira: View issue attachments.
            write:attachment:jira: Create and update issue attachments.
            delete:attachment:jira: Delete issue attachments.
            read:comment:jira: View issue comments.
            write:comment:jira: Create and update issue comments.
            delete:comment:jira: Delete issue comments.
            read:comment.property:jira: View issue comment properties.
            write:comment.property:jira: Create and update issue comment properties.
            delete:comment.property:jira: Delete issue comment properties.
            read:field:jira: View fields.
            write:field:jira: Create and update fields.
            delete:field:jira: Delete fields.
            read:field.default-value:jira: View field default values.
            write:field.default-value:jira: Create and update field default values.
            read:field.option:jira: View field options.
            write:field.option:jira: Create and update field options.
            delete:field.option:jira: Delete field options.
            read:field-configuration-scheme:jira: View field configuration schemes.
            write:field-configuration-scheme:jira: Create and update field configuration schemes.
            delete:field-configuration-scheme:jira: Delete field configuration schemes.
            read:custom-field-contextual-configuration:jira: Read custom field contextual configurations.
            write:custom-field-contextual-configuration:jira: Save custom field contextual configurations.
            read:field-configuration:jira: Read field configurations.
            write:field-configuration:jira: Save field configurations.
            delete:field-configuration:jira: Delete field configurations.
            read:field.options:jira: Read field options.
            read:issue-link:jira: View issue links.
            write:issue-link:jira: Create and update issue links.
            delete:issue-link:jira: Delete issue links.
            read:issue-link-type:jira: View issue link types.
            write:issue-link-type:jira: Create and update issue link types.
            delete:issue-link-type:jira: Delete issue link types.
            read:notification-scheme:jira: View notification schemes.
            read:priority:jira: View priorities.
            read:issue.property:jira: View issue properties.
            write:issue.property:jira: Create and update issue properties.
            delete:issue.property:jira: Delete issue properties.
            read:issue.remote-link:jira: View issue remote links.
            write:issue.remote-link:jira: Create and update issue remote links.
            delete:issue.remote-link:jira: Delete issue remote links.
            read:resolution:jira: View resolutions.
            read:issue-details:jira: View issue details.
            read:issue-security-scheme:jira: View issue security schemes.
            read:issue-type:jira: View issue types.
            write:issue-type:jira: Create and update issue types.
            delete:issue-type:jira: Delete issue types.
            read:issue-type-scheme:jira: View issue type schemes.
            write:issue-type-scheme:jira: Create and update issue type schemes.
            delete:issue-type-scheme:jira: Delete issue type schemes.
            read:issue-type-screen-scheme:jira: View issue type screen schemes.
            write:issue-type-screen-scheme:jira: Create and update issue type screen schemes.
            delete:issue-type-screen-scheme:jira: Delete issue type screen schemes.
            read:issue-type.property:jira: View issue type properties.
            write:issue-type.property:jira: Create and update issue type properties.
            delete:issue-type.property:jira: Delete issue type properties.
            read:issue.watcher:jira: View issue watchers.
            write:issue.watcher:jira: Create and update issue watchers.
            read:issue-worklog:jira: View issue worklogs.
            write:issue-worklog:jira: Create and update issue worklogs.
            delete:issue-worklog:jira: Delete issue worklogs.
            read:issue-worklog.property:jira: View issue worklog properties.
            write:issue-worklog.property:jira: Create and update issue worklog properties.
            delete:issue-worklog.property:jira: Delete issue worklog properties.
            read:issue-field-values:jira: View issue field valueses.
            read:issue-security-level:jira: View issue security levels.
            read:issue-status:jira: View issue statuses.
            read:issue-type-hierarchy:jira: Read issue type hierarchies.
            read:issue.changelog:jira: View issue changelogs.
            read:issue.transition:jira: View issue transitions.
            read:issue.vote:jira: View issue votes.
            write:issue.vote:jira: Create and update issue votes.
            read:issue.votes:jira: View issue voteses.
            read:issue-event:jira: Read issue events.
            read:jira-expressions:jira: View jira expressions.
            read:user:jira: View users.
            read:user.columns:jira: View user columnses.
            read:label:jira: View labels.
            read:permission:jira: View permissions.
            write:permission:jira: Create and update permissions.
            delete:permission:jira: Delete permissions.
            read:permission-scheme:jira: View permission schemes.
            write:permission-scheme:jira: Create and update permission schemes.
            delete:permission-scheme:jira: Delete permission schemes.
            read:project:jira: View projects.
            write:project:jira: Create and update projects.
            delete:project:jira: Delete projects and their details, such as issue types, project lead, and avatars.
            read:project-category:jira: View project categories.
            write:project-category:jira: Create and update project categories.
            delete:project-category:jira: Delete project categories.
            read:project.component:jira: View project components.
            write:project.component:jira: Create and update project components.
            delete:project.component:jira: Delete project components.
            read:project.property:jira: View project properties.
            write:project.property:jira: Create and update project properties.
            delete:project.property:jira: Delete project properties.
            read:project-role:jira: View project roles.
            write:project-role:jira: Create and update project roles.
            delete:project-role:jira: Delete project roles.
            read:project-version:jira: View project versions.
            write:project-version:jira: Create and update project versions.
            delete:project-version:jira: Delete project versions.
            read:project.feature:jira: Read project features.
            write:project.feature:jira: Save project features.
            read:screen:jira: View screens.
            write:screen:jira: Create and update screens.
            delete:screen:jira: Delete screens.
            read:screen-scheme:jira: View screen schemes.
            write:screen-scheme:jira: Create and update screen schemes.
            delete:screen-scheme:jira: Delete screen schemes.
            read:screen-field:jira: View screen fields.
            read:screen-tab:jira: View screen tabs.
            write:screen-tab:jira: Create and update screen tabs.
            delete:screen-tab:jira: Delete screen tabs.
            read:screenable-field:jira: View screenable fields.
            write:screenable-field:jira: Create and update screenable fields.
            delete:screenable-field:jira: Delete screenable fields.
            read:issue.time-tracking:jira: View issue time trackings.
            write:issue.time-tracking:jira: Create and update issue time trackings.
            read:user.property:jira: View user properties.
            write:user.property:jira: Create and update user properties.
            delete:user.property:jira: Delete user properties.
            read:webhook:jira: View webhooks.
            write:webhook:jira: Create and update webhooks.
            delete:webhook:jira: Delete webhooks.
            read:workflow:jira: View workflows.
            write:workflow:jira: Create and update workflows.
            delete:workflow:jira: Delete workflows.
            read:workflow-scheme:jira: View workflow schemes.
            write:workflow-scheme:jira: Create and update workflow schemes.
            delete:workflow-scheme:jira: Delete workflow schemes.
            read:status:jira: View statuses.
            read:workflow.property:jira: View workflow properties.
            write:workflow.property:jira: Create and update workflow properties.
            delete:workflow.property:jira: Delete workflow properties.
            delete:async-task:jira: Delete asynchronous task.
            read:instance-configuration:jira: View instance configurations.
            write:instance-configuration:jira: Create and update instance configurations.
            read:jql:jira: View JQL.
            validate:jql:jira: Validate JQL.
            read:project-type:jira: View project types.
            read:project.email:jira: View project emails.
            write:project.email:jira: Create and update project emails.
            read:role:jira: View roles.
            read:user-configuration:jira: View user configurations.
            write:user-configuration:jira: Create and update user configurations.
            delete:user-configuration:jira: Delete user configurations.
